# 점의 종류와 색상
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(size=2, aes(group=company, colour=company)) + geom_point(size=2, shape = 5)
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(size=2, aes(group=company, colour=company)) + geom_point(size=2, shape = '가')
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(size=2, aes(group=company, colour=company)) + geom_point(size=2, shape = '가', colour = "Red")
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(size=2, aes(group=company, colour=company)) + geom_point(size=2, shape = '가')
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6)
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6, colour="blue")
str(Cars93)
library(MASS)
str(Cars93)
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6)
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6, colour="blue")
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6, fill="blue")
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6, fill="blue", colour="pink")
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(colour="grey", shape=21, size=6)
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Price)) + geom_point(colour="grey", shape=21, size=6)
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(colour="grey", shape=21, size=6)
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(colour="grey", shape=21, size=6)
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Price)) + geom_point(colour="grey", shape=21, size=6)
g
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(colour="grey", shape=21, size=6, aes(fill=Price))
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Cylinders)) +  geom_point(colour="grey", shape=21, size=6)
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Cylinders)) +
geom_point(colour="grey", shape=21, size=6) +
scale_fill_brewer(palette="Oranges") # Oranges
geom_point(colour="grey", shape=21, size=6) +
scale_fill_brewer(palette="Oranges") # Oranges
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Cylinders)) +
geom_point(colour="grey", shape=21, size=6) +
scale_fill_brewer(palette="Oranges") # Oranges
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Cylinders)) +  geom_point(colour="grey", shape=21, size=6)
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Cylinders)) +
geom_point(colour="grey", shape=21, size=6) +
scale_fill_brewer(palette="Oranges") # Oranges 계통의 칼라들로 채운다.
w <- data.frame(year=c("2014", "2015", "2016", "2017", "2018"),
weight=c(65,66,64,68,72))
ggplot(data=w, aes(x=year)) + geom_bar()
ggplot(data=w, aes(x=year, y=weight)) + geom_bar() # 갯수를 세서 막대를 그리는게 기본이라..
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity")
ggplot(data=w, aes(x=year)) + geom_bar()
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity")
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity")
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity") + coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity") + ylim(60, 75)
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity") + ylim(60, 75)
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity") + coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity")
ggplot(data=w, aes(x=year, y=weight)) + geom_bar() # 갯수를 세서 막대를 그리는게 기본이라..
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity")
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity") + coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity") + coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), colour="blue", stat="identity") + coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight))+coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), colour="blue", stat="identity") + coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), colour="blue", stat="identity") + coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + coord_cartesian(ylim=c(60, 75))#fill로 컬러지정
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), colour="blue", stat="identity") + coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), colour="blue", stat="identity") + coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight))+coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=1)+coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=1)+coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), colour="blue", stat="identity") + coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=1)+coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=1)+coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=2)+coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), colour="blue", stat="identity") + coord_cartesian(ylim=c(60, 75))#테두리 colour="blue"
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=1)+coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=-1)+coord_cartesian(ylim=c(60, 75)) + labs(title = "테스트", subtitle="ggplot2 패키지를 이용한 시각화", x="년도", y="무게")
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=1)+coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=2)+coord_cartesian(ylim=c(60, 75))
# 트리맵 라이브러리 설치
install.packages("treemap")
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=-1)+coord_cartesian(ylim=c(60, 75)) + labs(title = "테스트", subtitle="ggplot2 패키지를 이용한 시각화", x="년도", y="무게")
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=-1)+coord_cartesian(ylim=c(60, 75)) + labs(title = "테스트", subtitle="ggplot2 패키지를 이용한 시각화", x="년도", y="무게")
# 트리맵 라이브러리 설치
install.packages("treemap")
# 저장
ggsave("ggplot_test.png")
# 트리맵 메모리 로드
library(treemap)
# 트리맵 그리기
# index에 표현하고 싶은 계층 순서대로 벡터로 생성. product, region 순으로 벡터를 지정함으로써 product가 region보다 더 상위로 구분이 됨
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황")
sales_df <- read.xlsx("data/data.xlsx", 2, encoding="UTF-8")
# 트리맵 그리기
# index에 표현하고 싶은 계층 순서대로 벡터로 생성. product, region 순으로 벡터를 지정함으로써 product가 region보다 더 상위로 구분이 됨
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황")
# 트리맵 그리기
treemap(sales_df, vSize="saleAmt", index=c("region", "product"), title="A기업 판매현황")
# 트리맵 그리기
# index에 표현하고 싶은 계층 순서대로 벡터로 생성. product, region 순으로 벡터를 지정함으로써 product가 region보다 더 상위로 구분이 됨
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황")
# 트리맵 그리기
treemap(sales_df, vSize="saleAmt", index=c("region", "product"), title="A기업 판매현황")
# 트리맵 그리기
treemap(sales_df, vSize="saleAmt", index=c("region", "product"), title="A기업 판매현황22")
# 트리맵 그리기
# index에 표현하고 싶은 계층 순서대로 벡터로 생성. product, region 순으로 벡터를 지정함으로써 product가 region보다 더 상위로 구분이 됨
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황")
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point()
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point() + scale_color_manual(values = rainbow(15))
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point() + scale_color_manual(values = rainbow(15))
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point() + scale_color_manual(values = topo.colors(15))
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point() + scale_color_brewer(palette = 'Set3')
#행 설정
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+
geom_point()+guides(color = guide_legend(nrow = 6))
#열 설정
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+
geom_point()+ scale_fill_brewer(palette="Reds")+ guides(color = guide_legend(ncol = 2)) #ncol = 2 두개의 열로 구성된 범례를 적용 가능
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+
geom_point()+guides(color=F)
# ggplot으로 그래프 만들기
p <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
p
# 인터랙티브 그래프 만들기
ggplotly(p)
# 인터랙티브 그래프 만들기
ggplotly(p)
ggplotly(p)
# 인터랙티브 막대 그래프 만들기
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar()
ggplotly(p)
# 인터랙티브 그래프 만들기
ggplotly(p)
library(plotly)
# 인터랙티브 그래프 만들기
ggplotly(p)
View(total)
# 인터랙티브 막대 그래프 만들기
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar()
ggplotly(p)
# 인터랙티브 막대 그래프 만들기
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = "dodge")
ggplotly(p)
p <- ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point()
ggplotly(p)
p <- ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point()
ggplotly(p)
ggplotly(p)
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point()#제조사별로 컬러를 하겠다.
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point() + scale_color_manual(values = rainbow(15))
View(test1)
# 배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + coord_cartesian(xlim=c(3, 6))
midwest
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(color=drv))#여기에 colour=drv 이라고 되어있는 경우도 있는데 이것도 지원된다.
#coord_cartesian 함수를 통해 x축과 y축의 넓이를 지정해줄 수 있다.
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + coord_cartesian(xlim=c(3, 6), ylim=c(10, 30))
ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
ggplot(data = mpg, aes(x = cty, y = hwy, col = drv)) + geom_point()
ggplot(data = mpg, aes(x = cty, y = hwy, col = blue)) + geom_point()
ggplot(data = mpg, aes(x = cty, y = hwy, col = drv)) + geom_point()
ggplot(data = mpg, aes(x = cty, y = hwy, col = cm.colors())) + geom_point()
ggplot(data = mpg, aes(x = cty, y = hwy, col = drv)) + geom_point()
ggplot(data = mpg, aes(x = cty, y = hwy, col = d)) + geom_point()
ggplot(data = mpg, aes(x = cty, y = hwy, col = drv)) + geom_point()
h<-ggplot(data = mpg, aes(x = cty, y = hwy, col = drv)) + geom_point()
h + scale_colour_manual(values="blue")
h + scale_colour_manual(values=c("red", "blue"))
ggplot(data = mpg, aes(x = cty, y = hwy, col = drv)) + geom_point()
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point(color="blue")
ggsave("result1.png")
ggsave("result1.png")
ggplot(mtcars, aes(x=cyl)) + geom_bar()
ggplot(mtcars, aes(x=cyl)) + geom_bar(width=0.5)
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar()
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar(width=0.5)
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar(aes(fill=factor(gear)), alpha=1.0)
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar(aes(fill=factor(gear))) + coord_polar()
ggplot(mtcars, aes(x=factor(cyl))) + geom_bar(aes(fill=factor(gear)), alpha=1.0)
midwest
mpg
mpg
ggplot(mpg, aes(x=factor(cyl))) + geom_bar(aes(fill=factor(class))), alpha=1.0)
ggplot(mpg, aes(x=factor(cyl))) + geom_bar(aes(fill=class)), alpha=1.0)
ggplot(mpg, aes(x=factor(cyl))) + geom_bar(aes(fill=class)), alpha=1.0)
cyl
ggplot(mpg, aes(x=factor(class))) + geom_bar(aes(fill=factor)), alpha=1.0)
mtcars
ggplot(mpg, aes(x=factor(class))) + geom_bar(aes(fill=factor(class))), alpha=1.0)
ggplot(mpg, aes(x=factor(class))) + geom_bar(aes(fill=factor(class)), alpha=1.0)
mpg
table(mpg$class)
ggsave("result2.png")
#Q2. 자동차 중에서 어떤 class(자동차 종류)가 가장 많은지 알아보려고 한다.
#자동차 종류별 빈도를 표현한 막대 그래프를 만들어 본다.
ggplot(mpg, aes(x=factor(drv))) + geom_bar(aes(fill=factor(class)), alpha=1.0)
#Q2. 자동차 중에서 어떤 class(자동차 종류)가 가장 많은지 알아보려고 한다.
#자동차 종류별 빈도를 표현한 막대 그래프를 만들어 본다.
ggplot(mpg, aes(x=factor(class))) + geom_bar(aes(fill=factor(drv)), alpha=1.0)
ggsave("result2.png")
# 배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + coord_cartesian(xlim=c(3, 6))
#coord_cartesian 함수를 통해 x축과 y축의 넓이를 지정해줄 수 있다.
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + coord_cartesian(xlim=c(3, 6), ylim=c(10, 30))
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + coord_cartesian(xlim=c(3, 6), ylim=c(10, 30))
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point(aes(color=drv))#여기에 colour=drv 이라고 되어있는 경우도 있는데 이것도 지원된다.
ggplot(data = midwest, aes(x = pototal, y = popasian)) + geom_point()
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point()
options(scipen = 99) 실행 후 그래프 생성
#Q3. 미국 지역별 인구통계 정보를 담은 ggplot2 패키지의 midwest 데이터를
#이용해서 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 한다.
#x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 된 산점도를
#만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정한다.
#정수로 표현하기 : options(scipen = 99) 실행 후 그래프 생성
#지수로 표현하기 : options(scipen = 0) 실행 후 그래프 생성
options(scipen = 99)
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point()
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point()+ coord_cartesian(xlim<=500000, ylim<=10000)
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point()+ coord_cartesian(xlim<=500000, ylim<=10000)
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point()+ coord_cartesian(xlim=c(0, 500000), ylim=c(0,10000))
ggsave("result3.png")
# 상자 그림
ggplot(data = mpg, aes(x = drv, y = hwy)) + geom_boxplot()
# 상자 그림
ggplot(data = mpg, aes(x = drv, y = hwy)) + geom_boxplot()
#Q4. class(자동차 종류)가 "compact", "subcompact", "suv"인 자동차의
#cty(도시 연비)가 어떻게 다른지 비교해보려고 합니다. 세개 차종의 cty를 나타낸 상자 그림을 만들어본다.
ggplot(data = mpg, aes(x = class, y = cty)) + geom_boxplot()
mpg%>%filter(class=='compact','subcompact','suv')
mpg%>%filter(class=='compact','subcompact','suv')
mpg
mpg%>%filter(class=='compact',class=='subcompact',class=='suv')
mpg%>%filter(class=='compact',class=='subcompact',class=='suv')
mpg%>%filter(class=='compact'|class=='subcompact'|class=='suv')
mpg%>%filter(class=='compact'|class=='subcompact'|class=='suv') %>% select(class,cty)
mpg%>%filter(class=='compact'|class=='subcompact'|class=='suv') %>% select(class,cty) %>% ggplot(data = mpg, aes(x = class, y = cty)) + geom_boxplot()
ggplot(data = mpgP, aes(x = class, y = cty)) + geom_boxplot()
ggplot(data = mpgP, aes(x = class, y = cty)) + geom_boxplot()
mpgP<-mpg%>%filter(class=='compact'|class=='subcompact'|class=='suv') %>% select(class,cty)
ggplot(data = mpgP, aes(x = class, y = cty)) + geom_boxplot()
#Q5. product_click.log 파일을 가지고 클릭된 상품의 갯수를 가지고 바 그래프로 출력한다.
product<- readLines("product_click.log")
#Q5. product_click.log 파일을 가지고 클릭된 상품의 갯수를 가지고 바 그래프로 출력한다.
product<- readLines("data\product_click.log")
#Q5. product_click.log 파일을 가지고 클릭된 상품의 갯수를 가지고 바 그래프로 출력한다.
product<- readLines("data/product_click.log")
product
product<-data.frame(product)
product
str(product)
view(product)
View(product)
# 선 색상 및 두께 설정 #size: 두깨 설정, colour : 선색
ggplot(coSalesDF, aes(x=year, y=sales)) + geom_line(size=2, aes(group=company,colour=company))#색을 지정해주니 구분이 된다.
# 트리맵 그리기
# index에 표현하고 싶은 계층 순서대로 벡터로 생성. product, region 순으로 벡터를 지정함으로써 product가 region보다 더 상위로 구분이 됨
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황")
sales_df <- read.xlsx("data/data.xlsx", 2, encoding="UTF-8")
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=-1)+coord_cartesian(ylim=c(60, 75)) + labs(title = "테스트", subtitle="ggplot2 패키지를 이용한 시각화", x="년도", y="무게")
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + coord_cartesian(ylim=c(60, 75))#fill로 컬러지정
ggplot(data=w, aes(x=year)) + geom_bar()#count를 해주기 때문에 해당하는 값만큼 지정해준다.
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity")
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity") + ylim(60, 75)
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + coord_cartesian(ylim=c(60, 75))#fill로 컬러지정
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity")
ggplot(data=product, aes(x=product)) + geom_bar(aes(fill=year), stat="identity")
ggplot(data=product, aes(x=product)) + geom_bar(aes(fill=year), stat="identity")
ggplot(data=product, aes(x=product)) + geom_bar(aes(fill=product), stat="identity")
product
#Q5. product_click.log 파일을 가지고 클릭된 상품의 갯수를 가지고 바 그래프로 출력한다.
product<- readLines("data/product_click.log")
data.frame(product)
#Q5. product_click.log 파일을 가지고 클릭된 상품의 갯수를 가지고 바 그래프로 출력한다.
product<- read.table("data/product_click.log")
product
ggplot(data=product, aes(x=v1)) + geom_bar(aes(fill=v1), stat="identity")
ggplot(data=product, aes(x=v1)) + geom_bar(aes(fill=v1), stat="identity")
ggplot(data=w, aes(x=year)) + geom_bar()#count를 해주기 때문에 해당하는 값만큼 지정해준다.
ggplot(data=product, aes(x=v1)) + geom_bar()
ggplot(data=product, aes(x=v1)) + geom_bar()
product
ggplot(data=product, aes(x=v2)) + geom_bar()
table(product)
table(product$v2)
table(product$v2)
ggplot(data=product, aes(x=v2)) + geom_bar()
#Q5. product_click.log 파일을 가지고 클릭된 상품의 갯수를 가지고 바 그래프로 출력한다.
product<- read.table("data/product_click.log")
product
ggplot(data=product, aes(x=v2)) + geom_bar()
ggplot(data=w, aes(x=year)) + geom_bar()#count를 해주기 때문에 해당하는 값만큼 지정해준다.
gplot(data=product, aes(x=v2)) + geom_bar()
ggplot(data=product, aes(x=V2)) + geom_bar()
ggplot(data=product, aes(x=V2)) + geom_bar() geom_bar(aes(fill=V2), stat="identity")
ggplot(data=product, aes(x=V2)) + geom_bar(aes(fill=V2), stat="identity")
ggplot(data=product, aes(x=V2)) + geom_bar(aes(fill=V2))
#Q4. class(자동차 종류)가 "compact", "subcompact", "suv"인 자동차의
#cty(도시 연비)가 어떻게 다른지 비교해보려고 합니다. 세개 차종의 cty를 나타낸 상자 그림을 만들어본다.
library(dplyr)
mpgP<-mpg%>%filter(class=='compact'|class=='subcompact'|class=='suv') %>% select(class,cty)
ggplot(data = mpgP, aes(x = class, y = cty)) + geom_boxplot()
ggsave("result4.png")
#Q5. product_click.log 파일을 가지고 클릭된 상품의 갯수를 가지고 바 그래프로 출력한다.
product<- read.table("data/product_click.log")
product
table(product)
ggplot(data=product, aes(x=V2)) + geom_bar(aes(fill=V2))
ggsave("result5.png")
product
#Q6 product_click.log 파일을 가지고 요일별 상품 클릭 횟수를 계산하여  바 그래프로 출력한다.(x축은 요일명)
substr(product$V1,1,8)
#Q6 product_click.log 파일을 가지고 요일별 상품 클릭 횟수를 계산하여  바 그래프로 출력한다.(x축은 요일명)
product2<-substr(product$V1,1,8)
tmp<-as.POSIXct(product2)
tmp<-as.POSIXct(product2)
product2
as.Date(product2, format="%Y%m%d")
tmp<-as.POSIXct(product2)
as.Date(product2, format="%Y%m%d")
weekdays(tmp)
product2<as.Date(product2, format="%Y%m%d")
as.Date(product2, "%A")
product2<as.Date(product2, format="%Y%m%d")
product2<as.Date(product2, format="%Y%m%d")
as.Date(product2, format="%Y%m%d")
product2<as.Date(product2, format="%Y%m%d")
product2<-as.Date(product2, format="%Y%m%d")
product2
as.Date(product2, "%A")
as.Date(product2, "%A")
product2
as.Date(product2,"%A")
format=as.Date(product2,"%A")
format(product2,"%A")
product$V3<-format(product2,"%A")
ggplot(data=product, aes(x=V3)) + geom_bar(aes(fill=V3))
ggplot(data=product, aes(x=V3)) + geom_bar(aes(fill=V3))+ labs(x="요일", y="클릭수")
product$day<-format(product2,"%A")
ggplot(data=product, aes(x=day)) + geom_bar(aes(fill=day))+ labs(x="요일", y="클릭수")
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=2)+coord_cartesian(ylim=c(60, 75))
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=1)+coord_cartesian(ylim=c(60, 75)) #nudge에 따라서 라벨의 위치가 조금씩 바뀐다.
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), colour="blue", stat="identity") + coord_cartesian(ylim=c(60, 75))#테두리 colour="blue"
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + coord_cartesian(ylim=c(60, 75))#fill로 컬러지정
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(stat="identity") + ylim(60, 75)
# 인터랙티브 막대 그래프 만들기
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar()
# 인터랙티브 막대 그래프 만들기
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = "dodge")
p <- ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point()
p <- ggplot(data = mpg, aes(x = displ, y = hwy, col = drv)) + geom_point()
#p라는 변수로 담으면 그려지는 것이 아니라 p라는 변수 안에 넣어지는 결과가 된다.
p
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Cylinders)) +
geom_point(colour="grey", shape=21, size=6) +
scale_fill_brewer(palette="Reds") # Reds
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6, colour="blue")
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6, fill="blue")
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(shape=21, size=6, fill="blue", colour="pink")
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(colour="grey", shape=21, size=6)
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Price)) + geom_point(colour="grey", shape=21, size=6)
ggplot(Cars93, aes(x=Weight, y=MPG.highway)) + geom_point(colour="grey", shape=21, size=6, aes(fill=Price))
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Cylinders)) +  geom_point(colour="grey", shape=21, size=6)
ggplot(Cars93, aes(x=Weight, y=MPG.highway, fill=Cylinders)) +#Cylinders : 칼라가 조금씩 변한다.
geom_point(colour="grey", shape=21, size=6) +
scale_fill_brewer(palette="Oranges") # Oranges 계통의 칼라들로 채운다.
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_gray()
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_bw()
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_linedraw()
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_light()
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_light()
ggplot(mtcars, aes(x=gear))+geom_bar() + labs(x="기어수", y="자동차수", title="변속기 기어별 자동차수") + theme_classic()
ggplot(data=product, aes(x=day)) + geom_bar(aes(fill=day))+ labs(x="요일", y="클릭수")+ theme_light()
ggsave("result6.png")
ggplot(data=product, aes(x=V2)) + geom_bar(aes(fill=V2))
ggplot(data = mpgP, aes(x = class, y = cty)) + geom_boxplot()
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point()+ coord_cartesian(xlim=c(0, 500000), ylim=c(0,10000))
#Q2. 자동차 중에서 어떤 class(자동차 종류)가 가장 많은지 알아보려고 한다.
#자동차 종류별 빈도를 표현한 막대 그래프를 만들어 본다.
ggplot(mpg, aes(x=factor(class))) + geom_bar(aes(fill=factor(drv)), alpha=1.0)
#1
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point(color="blue")
ggplot(data=product, aes(x=day)) + geom_bar(aes(fill=day))+ labs(x="요일", y="클릭수")+ theme_light()
sort(product$day)
sort(product$day)
a<-ggplot(data=product, aes(x=day)) + geom_bar(aes(fill=day))+ labs(x="요일", y="클릭수")+ theme_light()
a+scale_x_discrete(limits=c("월요일", "화요일", "수요일","목요일","금요일"))
a<-ggplot(data=product, aes(x=day)) + geom_bar(aes(fill=day))+ labs(x="요일", y="클릭수")+ theme_light()
ggplot(data=product, aes(x=day)) + geom_bar(aes(fill=day))+ labs(x="요일", y="클릭수")+ theme_light()
a+scale_x_discrete(limits=c("월요일", "화요일", "수요일","목요일","금요일"))
a+scale_x_discrete(limits=c("월요일", "화요일", "수요일","목요일","금요일"))
ggsave("result6.png")
ggsave("result6.png")
ggsave("result6.png")
a+scale_x_discrete(limits=c("월요일", "화요일", "수요일","목요일","금요일"))
b
b<-a+scale_x_discrete(limits=c("월요일", "화요일", "수요일","목요일","금요일"))
b
ggsave("result6.png")
View(product$day)
ggplot(data=product, aes(x=day)) + geom_bar(aes(fill=day))+ labs(x="요일", y="클릭수")+ theme_light()
b<-a+scale_x_discrete(limits=c("월요일", "화요일", "수요일","목요일","금요일","토요일"))
b
ggsave("result6.png")
ggplot(data=product, aes(x=day)) + geom_bar(aes(fill=day))+ labs(x="요일", y="클릭수")+ theme_light()
a+scale_x_discrete(limits=c("월요일", "화요일", "수요일","목요일","금요일","토요일"))
source('C:/heejung/Rstudy/ggplot2_lab.R', encoding = 'UTF-8')
sort(letters, decreasing=TRUE)
as.fector(product2)
as.factor(product2)
as.factor(product2$day)
as.factor(product2$day)
as.factor(product$day)
as.factor(product$day, levels=c("월요일", "화요일", "수요일","목요일","금요일","토요일"))
as.factor(product$day, levels=c("월요일", "화요일", "수요일","목요일","금요일","토요일"))
#Q6 product_click.log 파일을 가지고 요일별 상품 클릭 횟수를 계산하여  바 그래프로 출력한다.(x축은 요일명)
product2<-substr(product$V1,1,8)
product2<-as.Date(product2, format="%Y%m%d")
product$day<-format(product2,"%A")
#Q5. product_click.log 파일을 가지고 클릭된 상품의 갯수를 가지고 바 그래프로 출력한다.
product<- read.table("data/product_click.log")
#Q6 product_click.log 파일을 가지고 요일별 상품 클릭 횟수를 계산하여  바 그래프로 출력한다.(x축은 요일명)
product2<-substr(product$V1,1,8)
product2<-as.Date(product2, format="%Y%m%d")
View(product$day)
product$day<-format(product2,"%A")
as.factor(product$day, levels=c("월요일", "화요일", "수요일","목요일","금요일","토요일"))
as.factor(product$day)
leb<-as.factor(product$day)
lev<-as.factor(product$day)
levels(lev)
levels(lev)<-c("월요일", "화요일", "수요일","목요일","금요일","토요일")
lev
ggplot(data=product, aes(x=day)) + geom_bar(aes(fill=day))+ labs(x="요일", y="클릭수")+ theme_light()
ggplot(data=lev, aes(x=day)) + geom_bar(aes(fill=day))+ labs(x="요일", y="클릭수")+ theme_light()
lev
as.factor(product)
lev
product&day<-lev
product$day<-lev
ggplot(data=lev, aes(x=day)) + geom_bar(aes(fill=day))+ labs(x="요일", y="클릭수")+ theme_light()
ggplot(data=product, aes(x=day)) + geom_bar(aes(fill=day))+ labs(x="요일", y="클릭수")+ theme_light()
a+scale_x_discrete(limits=c("월요일", "화요일", "수요일","목요일","금요일","토요일"))
ggplot(data=product, aes(x=day)) + geom_bar(aes(fill=day))+ labs(x="요일", y="클릭수")+ theme_light()
b<-a+scale_x_discrete(limits=c("월요일", "화요일", "수요일"))
b
data(GNI2014)
str(GNI2014)
GNI2014
# 범례 없애기
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+
geom_point()+guides(color=F)
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point() + scale_color_brewer(palette = 'Set3')
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point() + scale_color_manual(values = topo.colors(15))
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point() + scale_color_manual(values = rainbow(15))
ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point()#제조사별로 컬러를 하겠다.
# 인터랙티브 막대 그래프 만들기
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = "dodge")
p <- ggplot(mpg, aes(x=displ, y=hwy,  color= manufacturer))+geom_point()
# 인터랙티브 막대 그래프 만들기
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar()
ggplot(data=w, aes(x=year, y=weight)) + geom_bar(aes(fill=year), stat="identity") + geom_label(aes(label=weight), nudge_y=-1)+coord_cartesian(ylim=c(60, 75)) + labs(title = "테스트", subtitle="ggplot2 패키지를 이용한 시각화", x="년도", y="무게")
# 트리맵 그리기
# index에 표현하고 싶은 계층 순서대로 벡터로 생성. product, region 순으로 벡터를 지정함으로써 product가 region보다 더 상위로 구분이 됨
treemap(sales_df, vSize="saleAmt", index=c("product", "region"), title="A기업 판매현황")
saleAmt
sales_df
GNI2014
con<-GNI2014
str(con)
treemap(sales_df, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보")
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보")
treemap(con, vSize="population", index=c("continent","iso3"), title="전세계 인구정보")
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보")
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보")
treemap?
?treemap
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보" fontfamily="휴면옛체")
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보", fontfamily="휴면옛체")
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보", fontfamily="휴먼옛체")
windowsFonts(lett=windowsFont("휴먼옛체"))
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보", fontfamily="lett")
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보", font="lett")
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보", fontfamily.title="lett")
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보", fontfamily="lett")
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보",
fontfamily.title="lett",fontfamily.labels = "lett",fontfamily.legend = "lett" )
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보",
fontfamily.title="lett",fontfamily.labels = "lett",fontfamily.legend = "lett" )
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보",
fontfamily.title="lett",fontfamily.labels = "lett",fontfamily.legend = "lett" )
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보",
fontfamily.title="lett",fontfamily.labels = "lett",fontfamily.legend = "lett" )
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보",
fontfamily.title="lett",fontfamily.labels = "lett",fontfamily.legend = "lett" )
png(filename=treemap.png)
png(filename="treemap.png")
png(filename="treemap.png")
dev.off
png(filename="treemap.png")
dev.off
png(filename="treemap.png")
dev.off
dev.off
dev.off()
png(filename="treemap.png",600,400)
treemap(con, vSize="population", index=c("continent","iso3","country"), title="전세계 인구정보",
fontfamily.title="lett",fontfamily.labels = "lett",fontfamily.legend = "lett" )
dev.off()
treemap(con, vSize="population", index=c("continent","iso3"), title="전세계 인구정보",
fontfamily.title="lett",fontfamily.labels = "lett",fontfamily.legend = "lett" )
treemap(con, vSize="population", index=c("continent","iso3"), title="전세계 인구정보",
fontfamily.title="lett",fontfamily.labels = "lett",fontfamily.legend = "lett" )
png(filename="treemap.png",600,400)
treemap(con, vSize="population", index=c("continent","iso3"), title="전세계 인구정보",
fontfamily.title="lett",fontfamily.labels = "lett",fontfamily.legend = "lett" )
dev.off()
