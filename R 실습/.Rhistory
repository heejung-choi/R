text
appname <- "edu_data_collection"
api_key <- "RvnZeIl8ra88reu8fm23m0bST"
api_secret <- "wTRylK94GK2KmhZUnqXonDaIszwAsS6VPvpSsIo6EX5GQLtzQo"
access_token <- "959614462004117506-dkWyZaO8Bz3ZXh73rspWfc1sQz0EnDU"    #토큰이란? 서버에 내가 안전한 유저임을 알려 주는 것.  안전한 유저라고 인식되면 서버에서 다양한 정보를 요청 할 수 있다.
access_token_secret <- "rxDWfg7uz1yXMTDwijz0x90yWhDAnmOM15R6IgC8kmtTe"
twitter_token <- create_token( # 변수 사용해서 토큰함수 만들기
app = appname,
consumer_key = api_key,
consumer_secret = api_secret,
access_token = access_token,
access_secret = access_token_secret)
key <- "취업"
key <- enc2utf8(key)# URL 인코딩 함수와 같은 역할
result <- search_tweets(key, n=100, token = twitter_token)
str(result)
result$retweet_text
content <- result$retweet_text
text <- gsub("NA.?","", text)
text
appname <- "edu_data_collection"
api_key <- "RvnZeIl8ra88reu8fm23m0bST"
api_secret <- "wTRylK94GK2KmhZUnqXonDaIszwAsS6VPvpSsIo6EX5GQLtzQo"
access_token <- "959614462004117506-dkWyZaO8Bz3ZXh73rspWfc1sQz0EnDU"    #토큰이란? 서버에 내가 안전한 유저임을 알려 주는 것.  안전한 유저라고 인식되면 서버에서 다양한 정보를 요청 할 수 있다.
access_token_secret <- "rxDWfg7uz1yXMTDwijz0x90yWhDAnmOM15R6IgC8kmtTe"
twitter_token <- create_token( # 변수 사용해서 토큰함수 만들기
app = appname,
consumer_key = api_key,
consumer_secret = api_secret,
access_token = access_token,
access_secret = access_token_secret)
key <- "취업"
key <- enc2utf8(key)# URL 인코딩 함수와 같은 역할
result <- search_tweets(key, n=100, token = twitter_token)
str(result)
result$retweet_text
content <- result$retweet_text
content <- gsub("NA.","", content)
content
content <- gsub("NA.?","", content)
content
content <- gsub("NA,|,NA,","",content)
content
api_key <- "RvnZeIl8ra88reu8fm23m0bST"
api_secret <- "wTRylK94GK2KmhZUnqXonDaIszwAsS6VPvpSsIo6EX5GQLtzQo"
access_token <- "959614462004117506-dkWyZaO8Bz3ZXh73rspWfc1sQz0EnDU"    #토큰이란? 서버에 내가 안전한 유저임을 알려 주는 것.  안전한 유저라고 인식되면 서버에서 다양한 정보를 요청 할 수 있다.
access_token_secret <- "rxDWfg7uz1yXMTDwijz0x90yWhDAnmOM15R6IgC8kmtTe"
twitter_token <- create_token( # 변수 사용해서 토큰함수 만들기
app = appname,
consumer_key = api_key,
consumer_secret = api_secret,
access_token = access_token,
access_secret = access_token_secret)
key <- "취업"
key <- enc2utf8(key)# URL 인코딩 함수와 같은 역할
result <- search_tweets(key, n=100, token = twitter_token)
str(result)
result$retweet_text
content <- result$retweet_text
content<-na.omit(content)
content
text <- gsub("[단독]", "", text)
searchUrl<- "https://openapi.naver.com/v1/search/blog.xml"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("맛집","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/xml",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
doc2 <- htmlParse(doc, encoding="UTF-8")
text<- xpathSApply(doc2, "//item/description", xmlValue)
text
text <- gsub("</?b>", "", text)
text <- gsub("&.+t;", "", text)
text
write(text,"naverblog.txt")
content <- gsub("[단독]", "", content)
content
content <- gsub("[[:punct:]]", "", content)
content <- gsub("[[:punct:]]", "", content)
content
content <- gsub("\n", "", content)
content
content <- gsub("[Aa]", "", content)#영어 제거
content
content <- gsub("[a-z,A-Z]", "", content)#영어 제거
content <
content
appname <- "edu_data_collection"
api_key <- "RvnZeIl8ra88reu8fm23m0bST"
api_secret <- "wTRylK94GK2KmhZUnqXonDaIszwAsS6VPvpSsIo6EX5GQLtzQo"
access_token <- "959614462004117506-dkWyZaO8Bz3ZXh73rspWfc1sQz0EnDU"    #토큰이란? 서버에 내가 안전한 유저임을 알려 주는 것.  안전한 유저라고 인식되면 서버에서 다양한 정보를 요청 할 수 있다.
access_token_secret <- "rxDWfg7uz1yXMTDwijz0x90yWhDAnmOM15R6IgC8kmtTe"
twitter_token <- create_token( # 변수 사용해서 토큰함수 만들기
app = appname,
consumer_key = api_key,
consumer_secret = api_secret,
access_token = access_token,
access_secret = access_token_secret)
key <- "취업"
key <- enc2utf8(key)# URL 인코딩 함수와 같은 역할
result <- search_tweets(key, n=100, token = twitter_token)
str(result)
result$retweet_text
content <-result$retweet_text
content<-na.omit(content) #na 제거
content <- gsub("[단독]", "", content)#[단독] 제거
content <- gsub("[[:punct:]]", "", content)#특수문자 제거
content <- gsub("\n", "", content)#개행문자 제거
content <- gsub("[a-z]", "", content)#영어 제거
content
content <- gsub("[a-z],[A-Z]", "", content)#영어 제거
content
content <- gsub("[A-Z]", "", content)#영어 제거
content
content
write(content,"naverblog.txt")
searchUrl<- "https://openapi.naver.com/v1/search/blog.xml"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("맛집","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/xml",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
doc2 <- htmlParse(doc, encoding="UTF-8")
text<- xpathSApply(doc2, "//item/description", xmlValue)
text
text <- gsub("</?b>", "", text)
text <- gsub("&.+t;", "", text)
text
write(text,"naverblog.txt")
appname <- "edu_data_collection"
api_key <- "RvnZeIl8ra88reu8fm23m0bST"
api_secret <- "wTRylK94GK2KmhZUnqXonDaIszwAsS6VPvpSsIo6EX5GQLtzQo"
access_token <- "959614462004117506-dkWyZaO8Bz3ZXh73rspWfc1sQz0EnDU"    #토큰이란? 서버에 내가 안전한 유저임을 알려 주는 것.  안전한 유저라고 인식되면 서버에서 다양한 정보를 요청 할 수 있다.
access_token_secret <- "rxDWfg7uz1yXMTDwijz0x90yWhDAnmOM15R6IgC8kmtTe"
twitter_token <- create_token( # 변수 사용해서 토큰함수 만들기
app = appname,
consumer_key = api_key,
consumer_secret = api_secret,
access_token = access_token,
access_secret = access_token_secret)
key <- "취업"
key <- enc2utf8(key)# URL 인코딩 함수와 같은 역할
result <- search_tweets(key, n=100, token = twitter_token)
str(result)
result$retweet_text
content <-result$retweet_text
content<-na.omit(content) #na 제거
content <- gsub("[단독]", "", content)#[단독] 제거
content <- gsub("[[:punct:]]", "", content)#특수문자 제거
content <- gsub("\n", "", content)#개행문자 제거
content <- gsub("[a-z]", "", content)#영어 제거
content <- gsub("[A-Z]", "", content)#영어 제거
content
write(content,"twitter.txt")
API_key  <- "%2BjzsSyNtwmcqxUsGnflvs3rW2oceFvhHR8AFkM3ao%2Fw50hwHXgGyPVutXw04uAXvrkoWgkoScvvhlH7jgD4%2FRQ%3D%3D"
bus_No <- "360"
url <- paste("http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList?ServiceKey=", API_key, "&strSrch=", bus_No, sep="")
doc <- xmlParse(url, encoding="UTF-8")
top <- xmlRoot(doc) #경로?
top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList")) #xpath ... //  조상이 누구든 지 간에 itemlist를 찾고... 이 XML 형식을 데이터 프레임으로 바꿔라.
df       #itemList의 서브태그 ( 변수)들을 dataframe 형식으로 만들면 하나의 열을 가진 dataframe 생성됨~
str(df)
View(df)
busRouteId <- df$busRouteId
busRouteId
df
subset(df, select=busRouteId, subset=노선ID)
subset(df, select=busRouteId)
paste("노선 ID",subset(df, select=busRouteId))
paste("노선 ID:",subset(df, select=busRouteId))
busRouteId<-subset(df, select=busRouteId)
busRouteId
busRoute<-paste("노선 ID:",busRouteId)
busRoute
busRouteId<-subset(df, select=busRouteId)
busRouteId
paste("변수이름",busRouteId,collapse=':')
busRouteId
source('C:/heejung/Rstudy/openapi.R', encoding = 'UTF-8', echo=TRUE)
busRouteId
busRouteId
library(XML)
API_key  <- "%2BjzsSyNtwmcqxUsGnflvs3rW2oceFvhHR8AFkM3ao%2Fw50hwHXgGyPVutXw04uAXvrkoWgkoScvvhlH7jgD4%2FRQ%3D%3D"
bus_No <- "360"
url <- paste("http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList?ServiceKey=", API_key, "&strSrch=", bus_No, sep="")
doc <- xmlParse(url, encoding="UTF-8")
top <- xmlRoot(doc) #경로?
top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList")) #xpath ... //  조상이 누구든 지 간에 itemlist를 찾고... 이 XML 형식을 데이터 프레임으로 바꿔라.
df       #itemList의 서브태그 ( 변수)들을 dataframe 형식으로 만들면 하나의 열을 가진 dataframe 생성됨~
busRouteId <- df$busRouteId
df       #itemList의 서브태그 ( 변수)들을 dataframe 형식으로 만들면 하나의 열을 가진 dataframe 생성됨~
busRouteId
busRouteId
busRouteId<-paste("노선 ID:",busRouteId)
busRouteId
length<-df$length
length
stStationNm
stStationNm<-df$stStationNm
stStationNm
edStationNm<-df$edStationNm
edStationNm
busRouteId <- df$busRouteId
busRouteId<-paste("노선 ID:",busRouteId)
busRouteId
busRouteId <- df$busRouteId[1]
busRouteId<-paste("노선 ID:",busRouteId)
busRouteId
busRouteId <- df$busRouteId[1]
length<-df$length[1]
stStationNm<-df$stStationNm[1]
edStationNm<-df$edStationNm[1]
term<-df$term[1]
busRouteId<-paste("노선 ID:",busRouteId)
length<-paste("노선길이:",length)
stStationNm<-paste("기점:",stStationNm)
edStationNm<-paste("종점:",edStationNm)
term<-paste("배차간격:",term)
cat("[ 360번 버스정보 ]",busRouteId,length,stStationNm,edStationNm,term,"\n")
cat("[ 360번 버스정보 ]",busRouteId,length,stStationNm,edStationNm,term,\n)
print("[ 360번 버스정보 ]",busRouteId,length,stStationNm,edStationNm,term)
print(paste("R", "은 통계분석 ", 전용 언어입니다))
print(paste("R", "은 통계분석 ", "전용 언어입니다"))
print(paste("R\n", "은 통계분석 ", "전용 언어입니다"))
print(paste("R",\n, "은 통계분석 ", "전용 언어입니다"))
cat(bustitle,"\n",busRouteId,"\n",length,"\n",stStationNm,"\n",edStationNm,"\n",term)
bustitle<-"[360번 버스정보]"
cat(bustitle,"\n",busRouteId,"\n",length,"\n",stStationNm,"\n",edStationNm,"\n",term)
# 네이버 뉴스 연동
library(jsonlite)
# 네이버 뉴스 연동
searchUrl<- "https://openapi.naver.com/v1/search/news.json"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("빅데이터","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/xml",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
# 네이버 뉴스 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
# 네이버 뉴스 연동
searchUrl<- "https://openapi.naver.com/v1/search/news.json"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("빅데이터","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/json",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
json_data <- content(doc, type = 'text', encoding = "UTF-8")
json_obj <- fromJSON(json_data)
df <- data.frame(json_obj)
df
json_data <- content(doc, type = 'text', encoding = "UTF-8")
# json 응답으로 출력되고 있는 것을 볼 수 있다.
#바이너리가 아니므로 타입 text
json_obj <- fromJSON(json_data)
json_obj
View(json_obj)
json_obj[["items"]][["title"]]
news<-json_obj[["items"]][["title"]]
news
news <- gsub("</?b>", "", news)
news
news <- gsub("&{2}t;", "",news)
news
news <- gsub("&{3}t;", "",news)
news
news <- gsub("&.{3}t;", "",news)
news
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("빅데이터","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/json",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
json_data <- content(doc, type = 'text', encoding = "UTF-8")
json_obj <- fromJSON(json_data)
View(json_obj)
news<-json_obj[["items"]][["title"]] #뉴스 내용만 추출
news<- gsub("</?b>", "", news)
news
news <- gsub("&.+{2}t;", "",news)
news
searchUrl<- "https://openapi.naver.com/v1/search/news.json"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("빅데이터","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/json",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
json_data <- content(doc, type = 'text', encoding = "UTF-8")
json_obj <- fromJSON(json_data)
View(json_obj)
news<-json_obj[["items"]][["title"]] #뉴스 내용만 추출
news<- gsub("</?b>", "", news)
news <- gsub("&.{,3}t;", "",news)
news
write(news,"navernews.txt")
View(json_obj)
df
API_key  <- "%2BjzsSyNtwmcqxUsGnflvs3rW2oceFvhHR8AFkM3ao%2Fw50hwHXgGyPVutXw04uAXvrkoWgkoScvvhlH7jgD4%2FRQ%3D%3D"
bus_No <- "360"
url <- paste("http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList?ServiceKey=", API_key, "&strSrch=", bus_No, sep="")
doc <- xmlParse(url, encoding="UTF-8")
top <- xmlRoot(doc) #경로?
top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList"))
View(df)
cat(bustitle,busRouteId,length,stStationNm,edStationNm,,term,sep="\n")
#출력
cat(bustitle,busRouteId,length,stStationNm,edStationNm,term,sep="\n")
#배차간격: term
library(XML)
API_key  <- "%2BjzsSyNtwmcqxUsGnflvs3rW2oceFvhHR8AFkM3ao%2Fw50hwHXgGyPVutXw04uAXvrkoWgkoScvvhlH7jgD4%2FRQ%3D%3D"
bus_No <- "360"
url <- paste("http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList?ServiceKey=", API_key, "&strSrch=", bus_No, sep="")
doc <- xmlParse(url, encoding="UTF-8")
top <- xmlRoot(doc) #경로?
top
df <- xmlToDataFrame(getNodeSet(doc, "//itemList")) #xpath ... //  조상이 누구든 지 간에 itemlist를 찾고... 이 XML 형식을 데이터 프레임으로 바꿔라.
View(df)
df       #itemList의 서브태그 ( 변수)들을 dataframe 형식으로 만들면 하나의 열을 가진 dataframe 생성됨~
#360번 버스정보만 추출
busRouteId <- df$busRouteId[1]
length<-df$length[1]
stStationNm<-df$stStationNm[1]
edStationNm<-df$edStationNm[1]
term<-df$term[1]
#앞에 ID값 더해줌
bustitle<-"[360번 버스정보]"
busRouteId<-paste("노선 ID:",busRouteId)
length<-paste("노선길이:",length)
stStationNm<-paste("기점:",stStationNm)
edStationNm<-paste("종점:",edStationNm)
term<-paste("배차간격:",term)
#출력
cat(bustitle,busRouteId,length,stStationNm,edStationNm,term,sep="\n")
# apply 계열의 함수를 알아보자
weight <- c(65.4, 55, 380, 72.2, 51, NA)
height <- c(170, 155, NA, 173, 161, 166)
gender <- c("M", "F","M","M","F","F")
df <- data.frame(w=weight, h=height)
df
apply(df, 1, sum, na.rm=TRUE)
apply(df, 2, sum, na.rm=TRUE)
apply(df, 2, sum, na.rm=TRUE) #열단위로 합
lapply(df, sum, na.rm=TRUE)
tapply(1:6, gender, sum, na.rm=TRUE)
#1:6을 gender라는 값을 기준으로 하여 그룹을 나눠라 (M/F)로 그룹 나눔
tapply(df$w, gender, mean, na.rm=TRUE)
df$w
df$gender
df$gender
#df가 가지고 있는 w의 순서와 gender가 같아야 한다.
df$w
gender
#df가 가지고 있는 w의 순서와 gender가 같아야 한다.
mapply(paste, 1:5, LETTERS[1:5], month.abb[1:5])
sapply(v, function(d) paste("-",d,"-", sep=""))
#함수를 만들어서 전달
v<-c("abc", "DEF", "TwT")
sapply(v, function(d) paste("-",d,"-", sep=""))
l<-list("abc", "DEF", "TwT")
sapply(l, function(d) paste("-",d,"-", sep=""))
lapply(l, function(d) paste("-",d,"-", sep=""))
l<-list("abc", "DEF", "TwT")
sapply(l, function(d) paste("-",d,"-", sep=""))
lapply(l, function(d) paste("-",d,"-", sep=""))
flower <- c("rose", "iris", "sunflower", "anemone", "tulip")
length(flower)
#문자 길이
nchar(flower)
sapply(flower, function(d) if(nchar(d) > 5) return(d))
source('C:/heejung/Rstudy/day8.R', encoding = 'UTF-8')
#문자 길이
nchar(flower)
#문자 길이가 5개 이상인 것만 리턴한다. -> list로 리턴했다.
sapply(flower, function(d) if(nchar(d) > 5) return(d))
sapply(flower, function(d) if(nchar(d) > 5) d)
sapply(flower, function(d) if(nchar(d) > 5) return(d) else return(NA))
sapply(flower, function(d) if(nchar(d) > 5) return(d) else return("값이 없습니다")) #NULL값을 NA로 주고 싶다면면
sapply(flower, function(d) if(nchar(d) > 5) return(d) else return(NA)) #NULL값을 NA로 주고 싶다면
sapply(flower, function(d) paste("-",d,"-", sep=""))
sapply(flower, function(d, n) if(nchar(d) > n) return(d), 4)
sapply(flower, function(d, n) if(nchar(d) > n) return(d), 4)
d
d
sapply(flower, function(d, n, c) if(nchar(d) > n +c) return(d), 3,2)
sapply(flower, function(d, n) if(nchar(d) > n) return(d), 4)
sapply(flower, function(d, n) if(nchar(d) > n) return(d), 4)
sapply(flower, function(d, n) if(nchar(d) > n) return(d), 4)
sapply(flower, function(d, n) if(nchar(d) > n) return(d), 4)
sapply(flower, function(d, c) if(nchar(d) > n) return(d), 4)
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d), 4)
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d))
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d),1)
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d),1)
count <- 1
myf <- function(x, wt=T){
print(paste(x,"(",count,")"))
Sys.sleep(3)
if(wt)
r <- paste("*", x, "*")
else
r <- paste("#", x, "#")
count <<- count + 1;
return(100)
}
result <- sapply(df$w, myf)
count <- 1
myf <- function(x, wt=T){
print(paste(x,"(",count,")"))
Sys.sleep(3)
if(wt)
r <- paste("*", x, "*")
else
r <- paste("#", x, "#")
count <<- count + 1;
return(100)
}
result <- sapply(df$w, myf)
length(result)
result
df$w
r
print(r)
count <- 1
myf <- function(x, wt=T){
print(paste(x,"(",count,")"))
Sys.sleep(3)
if(wt)
r <- paste("*", x, "*")
else
r <- paste("#", x, "#")
count <<- count + 1;
return(100)
}
result <- sapply(df$w, myf)
length(result)
result
sapply(df$w, myf, F)
sapply(df$w, myf, wt=F)
rr1 <- sapply(df$w, myf, wt=F)
str(rr1)
print(r)
print(r)
r<-NULL
count <- 1
myf <- function(x, wt=T){
print(paste(x,"(",count,")"))
Sys.sleep(3)
if(wt)
r <- paste("*", x, "*")
else
r <- paste("#", x, "#")
count <<- count + 1;
return(100)
}
result <- sapply(df$w, myf)
print(r)
count <- 1
myf <- function(x, wt=T){
print(paste(x,"(",count,")"))
Sys.sleep(3)
if(wt)
r <- paste("*", x, "*")
else
r <- paste("#", x, "#")
count <<- count + 1;
print(r)
return(100)
}
result <- sapply(df$w, myf)
r<-NULL
count <- 1
myf <- function(x, wt=T){
print(paste(x,"(",count,")"))
Sys.sleep(3)
if(wt)
r <- paste("*", x, "*")
else
r <- paste("#", x, "#")
count <<- count + 1;
print(r)
return(r)
}
result <- sapply(df$w, myf)
length(result)
result
sapply(df$w, myf, F)
sapply(df$w, myf, wt=F)
v<-sample(1:26,10)
v
letter
letters
LETTERS
v<-sample(1:26,10)
sapply(flower, function(d) return(c(LETTERS[d])))
result <- sapply(v)
v
sapply(v, function(d) return(c(LETTERS[d])))
v<-sample(1:26,10)
sapply(v, function(d) return(c(LETTERS[d])))
sapply(v, function(d) return((LETTERS[d]))
sapply(v, function(d) return((LETTERS[d])
sapply(v, function(d) return(LETTERS[d]))
sapply(sample(1:26,10), function(d) return(LETTERS[d]))
sapply(sample(1:26,10), function(d) return(LETTERS[d]))
