for(i in 1:4){
for(j in 3:12){
tempReviewNodes <- remDr$findElements(using = "css selector","ul.u_cbox_list span.u_cbox_contents")
tempReviewTexts <- sapply(tempReviewNodes,function(x){x$getElementText()})
totalReviewTexts <- c(totalReviewTexts,tempReviewTexts)
if(j<12){
nextButtonTag <- remDr$findElement(using = "css selector",paste0("#cbox_module > div > div.u_cbox_paginate > div > a:nth-child(",j,")"))
nextButtonTag$clickElement()
}
Sys.sleep(2)
}
nextButtonTag <- remDr$findElement(using = "css selector","cbox_module > div > div.u_cbox_paginate > div > a:nth-child(13)")
nextButtonTag$clickElement()
}
totalReviewTexts
totalReviewTexts <- vector()
for(i in 1:4){
for(j in 3:12){
tempReviewNodes <- remDr$findElements(using = "css selector","div.u_cbox_text_wrap > span.u_cbox_contents")
tempReviewTexts <- sapply(tempReviewNodes,function(x){x$getElementText()})
totalReviewTexts <- c(totalReviewTexts,tempReviewTexts)
if(j<12){
nextButtonTag <- remDr$findElement(using = "css selector",paste0("#cbox_module>div>div.u_cbox_paginate>div> a:nth-child(",i,") > span"))
#cbox_module > div > div.u_cbox_paginate > div > a:nth-child(4)
nextButtonTag$clickElement()
}
Sys.sleep(2)
}
nextButtonTag <- remDr$findElement(using = "css selector","cbox_module > div > div.u_cbox_paginate > div > a:nth-child(13)")
nextButtonTag$clickElement()
}
totalReviewTexts <- vector()
for(i in 1:4){
for(j in 3:12){
tempReviewNodes <- remDr$findElements(using = "css selector","div.u_cbox_text_wrap > span.u_cbox_contents")
tempReviewTexts <- sapply(tempReviewNodes,function(x){x$getElementText()})
totalReviewTexts <- c(totalReviewTexts,tempReviewTexts)
if(j<12){
nextButtonTag <- remDr$findElement(using = "css selector",paste0("#cbox_module>div>div.u_cbox_paginate>div> a:nth-child(",j,") > span"))
#cbox_module > div > div.u_cbox_paginate > div > a:nth-child(4)
nextButtonTag$clickElement()
}
Sys.sleep(2)
}
nextButtonTag <- remDr$findElement(using = "css selector","cbox_module > div > div.u_cbox_paginate > div > a:nth-child(13)")
nextButtonTag$clickElement()
}
totalReviewTexts <- vector()
for(i in 1:4){
for(j in 3:12){
tempReviewNodes <- remDr$findElements(using = "css selector","div.u_cbox_text_wrap > span.u_cbox_contents")
tempReviewTexts <- sapply(tempReviewNodes,function(x){x$getElementText()})
totalReviewTexts <- c(totalReviewTexts,tempReviewTexts)
if(j<12){
nextButtonTag <- remDr$findElement(using = "css selector",paste0("#cbox_module > div > div.u_cbox_paginate > div > a:nth-child(",j+1,")"))
nextButtonTag$clickElement()
}
Sys.sleep(2)
}
nextButtonTag <- remDr$findElement(using = "css selector","cbox_module > div > div.u_cbox_paginate > div > a:nth-child(13)")
nextButtonTag$clickElement()
}
totalReviewTexts <- vector()
for(i in 1:4){
for(j in 3:13){
tempReviewNodes <- remDr$findElements(using = "css selector","div.u_cbox_text_wrap > span.u_cbox_contents")
tempReviewTexts <- sapply(tempReviewNodes,function(x){x$getElementText()})
totalReviewTexts <- c(totalReviewTexts,tempReviewTexts)
nextButtonTag <- remDr$findElement(using = "css selector",paste0("#cbox_module > div > div.u_cbox_paginate > div > a:nth-child(",j+1,")"))
nextButtonTag$clickElement()
Sys.sleep(1)
}
}
totalReviewTexts <- vector()
for(i in 1:4){
for(j in 3:12){
tempReviewNodes <- remDr$findElements(using = "css selector","div.u_cbox_text_wrap > span.u_cbox_contents")
tempReviewTexts <- sapply(tempReviewNodes,function(x){x$getElementText()})
totalReviewTexts <- c(totalReviewTexts,tempReviewTexts)
nextButtonTag <- remDr$findElement(using = "css selector",paste0("#cbox_module > div > div.u_cbox_paginate > div > a:nth-child(",j+1,")"))
nextButtonTag$clickElement()
Sys.sleep(1)
}
}
remDr$navigate("http://comic.naver.com/comment/comment.nhn?titleId=570503&no=135")
totalReview <- remDr$findElement(using = "css selector","#cbox_module > div > div.u_cbox_sort > div.u_cbox_sort_option > div > ul > li:nth-child(2) > a")
totalReview$clickElement
totalReviewTexts <- vector()
for(i in 1:4){
for(j in 3:12){
tempReviewNodes <- remDr$findElements(using = "css selector","div.u_cbox_text_wrap > span.u_cbox_contents")
tempReviewTexts <- sapply(tempReviewNodes,function(x){x$getElementText()})
totalReviewTexts <- c(totalReviewTexts,tempReviewTexts)
nextButtonTag <- remDr$findElement(using = "css selector",paste0("#cbox_module > div > div.u_cbox_paginate > div > a:nth-child(",j+1,")"))
nextButtonTag$clickElement()
Sys.sleep(1)
}
}
remDr$navigate("http://comic.naver.com/comment/comment.nhn?titleId=570503&no=135")
totalReview <- remDr$findElement(using = "css selector","#cbox_module > div > div.u_cbox_sort > div.u_cbox_sort_option > div > ul > li:nth-child(2) > a")
totalReview$clickElement
totalReview <- remDr$findElement(using = "css selector","#cbox_module > div > div.u_cbox_sort > div.u_cbox_sort_option > div > ul > li:nth-child(2) > a")
totalReview$clickElement()
totalReviewTexts <- vector()
for(i in 1:4){
for(j in 3:12){
tempReviewNodes <- remDr$findElements(using = "css selector","div.u_cbox_text_wrap > span.u_cbox_contents")
tempReviewTexts <- sapply(tempReviewNodes,function(x){x$getElementText()})
totalReviewTexts <- c(totalReviewTexts,tempReviewTexts)
nextButtonTag <- remDr$findElement(using = "css selector",paste0("#cbox_module > div > div.u_cbox_paginate > div > a:nth-child(",j+1,")"))
nextButtonTag$clickElement()
Sys.sleep(1)
}
}
for(i in 1:5){
for(j in 3:12){
tempReviewNodes <- remDr$findElements(using = "css selector","div.u_cbox_text_wrap > span.u_cbox_contents")
tempReviewTexts <- sapply(tempReviewNodes,function(x){x$getElementText()})
totalReviewTexts <- c(totalReviewTexts,tempReviewTexts)
nextButtonTag <- remDr$findElement(using = "css selector",paste0("#cbox_module > div > div.u_cbox_paginate > div > a:nth-child(",j+1,")"))
nextButtonTag$clickElement()
Sys.sleep(1)
}
}
length(totalReviewTexts)
head(totalReviewTexts)
nrow(totalReviewTexts)
length(totalReviewTexts)
totalReviewTexts <- vector()
length(totalReviewTexts)
totalReview <- remDr$findElement(using = "css selector","#cbox_module > div > div.u_cbox_sort > div.u_cbox_sort_option > div > ul > li:nth-child(2) > a")
totalReview$clickElement()
totalReviewTexts <- vector()
for(i in 1:5){
for(j in 3:12){
tempReviewNodes <- NULL
tempReviewTexts <- NULL
tempReviewNodes <- remDr$findElements(using = "css selector","div.u_cbox_text_wrap > span.u_cbox_contents")
tempReviewTexts <- sapply(tempReviewNodes,function(x){x$getElementText()})
totalReviewTexts <- c(totalReviewTexts,tempReviewTexts)
nextButtonTag <- remDr$findElement(using = "css selector",paste0("#cbox_module > div > div.u_cbox_paginate > div > a:nth-child(",j+1,")"))
nextButtonTag$clickElement()
Sys.sleep(2)
}
}
totalReview <- remDr$findElement(using = "css selector","#cbox_module > div > div.u_cbox_sort > div.u_cbox_sort_option > div > ul > li:nth-child(2) > a")
totalReview$clickElement()
totalReview <- remDr$findElement(using = "css selector","#cbox_module > div > div.u_cbox_sort > div.u_cbox_sort_option > div > ul > li:nth-child(2) > a")
totalReview$clickElement()
totalReviewTexts <- vector()
for(i in 1:5){
for(j in 3:12){
tempReviewNodes <- NULL
tempReviewTexts <- NULL
tempReviewNodes <- remDr$findElements(using = "css selector","div.u_cbox_text_wrap > span.u_cbox_contents")
tempReviewTexts <- sapply(tempReviewNodes,function(x){x$getElementText()})
totalReviewTexts <- c(totalReviewTexts,tempReviewTexts)
nextButtonTag <- remDr$findElement(using = "css selector",paste0("#cbox_module > div > div.u_cbox_paginate > div > a:nth-child(",j+1,")"))
nextButtonTag$clickElement()
print(tempReviewTexts)
Sys.sleep(2)
}
}
length(totalReviewTexts)
totalReview <- remDr$findElement(using = "css selector","#cbox_module > div > div.u_cbox_sort > div.u_cbox_sort_option > div > ul > li:nth-child(2) > a")
totalReview$clickElement()
totalReviewTexts <- vector()
for(i in 1:5){
for(j in 3:12){
tempReviewNodes <- NULL
tempReviewTexts <- NULL
tempReviewNodes <- remDr$findElements(using = "css selector","div.u_cbox_text_wrap > span.u_cbox_contents")
tempReviewTexts <- sapply(tempReviewNodes,function(x){x$getElementText()})
totalReviewTexts <- c(totalReviewTexts,tempReviewTexts)
nextButtonTag <- remDr$findElement(using = "css selector",paste0("#cbox_module > div > div.u_cbox_paginate > div > a:nth-child(",j+1,")"))
nextButtonTag$clickElement()
print(tempReviewTexts)
print(length(tempReviewTexts))
Sys.sleep(2)
}
}
length(totalReviewTexts)
c(bestReviewTexts,totalReviewTexts)
webtoon1 <- c(bestReviewTexts,totalReviewTexts)
write(webtoon1,file = "webtoon1.txt",sep = "\n")
webtoon1
class(webtoon1)
unlist(webtoon1)
class(unlist(webtoon1))
is.vector(unlist(webtoon1))
webtoon1 <- unlist(webtoon1)
write(webtoon1,file = "webtoon1.txt",sep = "\n")
bestReviewTexts
totalReviewTexts
pdf
pdf
pdf
hotel <- read.table("C:/boxak/Rstudy/hotel.txt")
hotel <- read.table("C:\boxak\Rstudy\hotel.txt")
hotel <- read.table("C:/boxak/Rstudy/hotel.txt")
hotel <- read.txt("C:/boxak/Rstudy/hotel.txt")
hotel <- read.table("C:/boxak/Rstudy/hotel.txt")
hotel <- read.table("C:/boxak/Rstudy/hotel.txt")
pdf <- read.table("C:/boxak/Rstudy/data/product_click.log")
?konlp
hotel <- readLines("hotel.txt")
hotel2<- extractNoun(hotel)
libaray(KoNLP)
library(KoNLP)
install.packages("KoNLP")
hotel <- readLines("hotel.txt")
hotel2<- extractNoun(hotel)
hotelData<-source('C:/boxak/Rstudy/datatest.R'); hotelData;
hotelData<-source('C:/boxak/Rstudy/datatest.R');
hotelData<-source('C:/boxak/Rstudy/datatest.R');
imsi<-source('C:/boxak/Rstudy/rjavatest.R');
imsi
hotelData<-source('C:/boxak/Rstudy/datatest.R');
imsi<-source('C:/boxak/Rstudy/rjavatest.R');
hotelHan<-hotel$hangul
hotel
hotelD<- as.data.frame(hotelResult)
library(KoNLP)
hotel <- readLines("C:/boxak/Rstudy/hotel.txt")
hotel2<- extractNoun(hotel)
hotelUn <- unlist(hotel2)
hotelUn2<-gsub("[^가-힣]", "",hotelUn)
hotelUn3<-gsub(" ", "",hotelUn2)
hangul<- Filter(function(x) {nchar(x) >= 2}, hotelUn3)
word_table <- table(hangul)
final <- sort(word_table, decreasing = T)
hotelResult<-head(final, 10)
hotelUn <- unlist(hotel2)
hotel <- readLines("C:/boxak/Rstudy/hotel.txt")
hotel2<- extractNoun(hotel)
hotelUn <- unlist(hotel2)
hotelUn2<-gsub("[^가-힣]", "",hotelUn)
hotelUn3<-gsub(" ", "",hotelUn2)
hangul<- Filter(function(x) {nchar(x) >= 2}, hotelUn3)
word_table <- table(hangul)
final <- sort(word_table, decreasing = T)
hotelResult<-head(final, 10)
hotelD<- as.data.frame(hotelResult)
hotelD
hotelData<-source('C:/boxak/Rstudy/datatest.R');
hotelData<-source('C:/boxak/Rstudy/datatest.R');
hotelData<-source('C:/boxak/Rstudy/datatest.R');
hotelD
hotelD$Freq
hotelD$hangul
hotelD$hangul
hotelResult<-head(final, 10)
hotelResult
hotelResult
names(hotelResult)
hotelData<-names(hotelResult)
hotelData
hotelData<-source('C:/boxak/Rstudy/lab.R');
hotelData<-source('C:/boxak/Rstudy/lab.R');
hotelData<-source('C:/boxak/Rstudy/lab.R');
hotelData
hotelUn2<-gsub("[^가-힣]","",hotelUn)
hotelData<-source('C:/boxak/Rstudy/lab.R');
hotelData<-source('C:/boxak/Rstudy/lab.R',encoding = "UTF-8");
hotelData
hotelData$value
pdf
hotelD$hangul
hotelD
library(Rserve)
library(Rserve)
library(ggplot2)
library(gridExtra)
library(ggmap)
map0 <- leaflet() %>% setView(lng = seoul_lonlat$lon, lat = seoul_lonlat$lat, zoom = 16)
map0 #설정까지만 함
#leaflet은 api키 작성하지 않아도 됨
# 지도 배경 그리기
leaflet()
library(leaflet)
library(dplyr)
library(ggmap)
seoul_lonlat<-geocode("seoul")
#leaflet은 api키 작성하지 않아도 됨
# 지도 배경 그리기
leaflet()
seoul_lonlat<-geocode("seoul")
# 지도 배경에 타일깔기
leaflet() %>% addTiles() #구글 서버한테 지도 파일을 받아와서 화면에 내보내는 역할
# 지도 배경에 센터 설정하기
map0 <- leaflet() %>% setView(lng = seoul_lonlat$lon, lat = seoul_lonlat$lat, zoom = 16)
map0 #설정까지만 함
# 지도 배경에 센터 설정하기
map0 <- leaflet() %>% setView(lng = seoul_lonlat$lon, lat = seoul_lonlat$lat, zoom = 16)
seoul_lonlat<-geocode("seoul")
map_seoul <- get_map(location="seoul", zoom=11, maptype="roadmap")
ggmap(map_seoul)+geom_point(data=df_add, aes(x=lon, y=lat), alpha=0.5, size=5, color="blue")
register_google(key='AIzaSyD8k2DWC_7yFHCrH6LDR3RfITsmWMEqC8c') #key를 등록하면, 그 정보가 working directory안에 보관됨
seoul_lonlat<-geocode("seoul")
#leaflet은 api키 작성하지 않아도 됨
# 지도 배경 그리기
leaflet()
# 지도 배경에 타일깔기
leaflet() %>% addTiles() #구글 서버한테 지도 파일을 받아와서 화면에 내보내는 역할
# 지도 배경에 센터 설정하기
map0 <- leaflet() %>% setView(lng = seoul_lonlat$lon, lat = seoul_lonlat$lat, zoom = 16)
map0 #설정까지만 함
# 지도 배경에 센터 설정하고 타일깔기
map1 <- map0 %>% addTiles()
map1
mk <- multi_lonlat
lon <- mk$lon
lat <- mk$lat
msg <- '<strong><a href="http://www.multicampus.co.kr" style="text-decoration:none" >멀티캠퍼스</a></strong><hr>우리가 공부하는 곳 ㅎㅎ'
#html/css태그 사용으로 꾸밀 수 있음
leaflet() %>% setView(lng = mk$lon, lat = mk$lat, zoom = 16) %>%
addTiles() %>%
addCircles(lng = lon, lat = lat, color='green', popup = msg ) -> map2
map2
map2 <- leaflet() %>% setView(lng = mk$lon, lat = mk$lat, zoom = 18) %>% addTiles() %>%
addCircles(lng = lon, lat = lat, color='green', popup = msg )
map2
map2 <- leaflet() %>% setView(lng = mk$lon, lat = mk$lat, zoom = 5) %>% addTiles() %>%
addCircles(lng = lon, lat = lat, color='green', popup = msg )
map2
map2 <- leaflet() %>% setView(lng = mk$lon, lat = mk$lat, zoom = 1) %>% addTiles() %>%
addCircles(lng = lon, lat = lat, color='green', popup = msg )
library(dplyr)
library(leaflet)
DONG<-read.csv('data/one.csv')
Encoding(names(korpopmap2))<-'UTF-8'
Encoding(korpopmap2@data$name)<-'UTF-8'
Encoding(korpopmap2@data$행정구역별_읍면동)<-'UTF-8'
Encoding(names(korpopmap3))<-'UTF-8'
Encoding(korpopmap3@data$name)<-'UTF-8'
Encoding(korpopmap3@data$행정구역별_읍면동)<-'UTF-8'
head(korpopmap3@data)
k2 <- korpopmap2
k3 <- korpopmap3
k2@data[c("C행정구역별_읍면동", "행정구역별_읍면동")]
k3@data[c("C행정구역별_읍면동", "행정구역별_읍면동")]
View(k3)
str(k3@data)
k3 <- korpopmap3
DONG<-read.csv('data/one.csv')
Encoding(names(korpopmap2))<-'UTF-8'
Encoding(korpopmap2@data$name)<-'UTF-8'
Encoding(korpopmap2@data$행정구역별_읍면동)<-'UTF-8'
DONG<-read.csv('data/one.csv')
DONG
Encoding(names(korpopmap2))<-'UTF-8'
View(interval)
library(dplyr)
library(leaflet)
library(Kormaps)
library(dplyr)
library(leaflet)
library(rgeos)
DONG<-read.csv('data/one.csv')
Encoding(names(korpopmap2))<-'UTF-8'
Encoding(korpopmap2@data$name)<-'UTF-8'
Encoding(korpopmap2@data$행정구역별_읍면동)<-'UTF-8'
Encoding(names(korpopmap3))<-'UTF-8'
Encoding(korpopmap3@data$name)<-'UTF-8'
Encoding(korpopmap3@data$행정구역별_읍면동)<-'UTF-8'
head(korpopmap3@data)
k2 <- korpopmap2
k2@data[c("C행정구역별_읍면동", "행정구역별_읍면동")]
k3@data[c("C행정구역별_읍면동", "행정구역별_읍면동")]
View(k3)
str(k3@data)
#강남구 데이터 뽑기
guname <- '강남구'
gucode <- k2@data[k2@data$name == guname, "code.data"]
# 강남구: 11230
pattern <- paste0('^', gucode)
grepD<-grep(pattern,k3@data$code.data)
k3@data<-k3@data[grepD,]
k3@polygons<-k3@polygons[grepD]
View(k3@polygons)
k3 <- korpopmap3
k2 <- korpopmap2
k2@data[c("C행정구역별_읍면동", "행정구역별_읍면동")]
k3@data[c("C행정구역별_읍면동", "행정구역별_읍면동")]
#강남구 데이터 뽑기
guname <- '강남구'
gucode <- k2@data[k2@data$name == guname, "code.data"]
# 강남구: 11230
pattern <- paste0('^', gucode)
grepD<-grep(pattern,k3@data$code.data)
k3@data<-k3@data[grepD,]
k3@polygons<-k3@polygons[grepD]
View(k3@polygons)
leaflet(k3)
addTiles()
leaflet(k3) %>%
addTiles() %>%
setView(lat=37.52711, lng=126.987517, zoom=12) %>%
addPolygons(stroke =FALSE,
fillOpacity = .7,
popup = mypopup,
color = ~mypalette(k3@data$일인가구)) %>%
addLegend( values = ~k3@data$일인가구,
pal = mypalette ,
title = '인구수',
opacity = 1)
View(L1)
DONG<-read.csv('data/one.csv')
Encoding(names(korpopmap2))<-'UTF-8'
Encoding(korpopmap2@data$name)<-'UTF-8'
Encoding(korpopmap2@data$행정구역별_읍면동)<-'UTF-8'
Encoding(names(korpopmap3))<-'UTF-8'
Encoding(korpopmap3@data$name)<-'UTF-8'
Encoding(korpopmap3@data$행정구역별_읍면동)<-'UTF-8'
head(korpopmap3@data)
k2 <- korpopmap2
k3 <- korpopmap3
k2@data[c("C행정구역별_읍면동", "행정구역별_읍면동")]
#강남구 데이터 뽑기
guname <- '강동구'
gucode <- k2@data[k2@data$name == guname, "code.data"]
# 강남구: 11230
pattern <- paste0('^', gucode)
grepD<-grep(pattern,k3@data$code.data)
k3@data<-k3@data[grepD,]
k3@polygons<-k3@polygons[grepD]
View(k3@polygons)
#강남구 데이터 저장
k3@data$name<-gsub('·','',k3@data$name)
colnames(DONG)<-c('구별','name','일인가구')
dong <- DONG %>%filter(구별=='강동구')
k3@data<-merge(k3@data,dong,by.x='name',sort=FALSE)
mymap <- k3@data
mypalette <- colorNumeric(palette ='Set3' , domain = k3@data$'일인가구')
mypopup <- paste0(mymap$name,'<br> 1인가구: ',k3@data$'일인가구')
#지도 출력
map7 <- NULL #이전에 담겨져 있는 것이 있다면 해제시키는 것
map7<-leaflet(k3) %>%
addTiles() %>%
setView(lat=37.52711, lng=126.987517, zoom=12) %>%
addPolygons(stroke =FALSE,
fillOpacity = .7,
popup = mypopup,
color = ~mypalette(k3@data$일인가구)) %>%
addLegend( values = ~k3@data$일인가구,
pal = mypalette ,
title = '인구수',
opacity = 1)
map7
str(k3)
map7<-leaflet(k3) %>%
addTiles() %>%
setView(lat=37.52711, lng=126.987517, zoom=12) %>%
addPolygons(stroke =FALSE,
fillOpacity = .7,
popup = mypopup,
color = ~mypalette(k3@data$일인가구)) %>%
addLegend( values = ~k3@data$일인가구,
pal = mypalette ,
title = '인구수',
opacity = 1)
map7
rm()
ls()
rm(list = ls())
library(dplyr);library(leaflet);library(Kormaps)
library(rgeos)
DONG<-read.csv('data/one.csv')
Encoding(names(korpopmap2))<-'UTF-8'
Encoding(korpopmap2@data$name)<-'UTF-8'
Encoding(korpopmap2@data$행정구역별_읍면동)<-'UTF-8'
Encoding(names(korpopmap3))<-'UTF-8'
Encoding(korpopmap3@data$name)<-'UTF-8'
Encoding(korpopmap3@data$행정구역별_읍면동)<-'UTF-8'
head(korpopmap3@data)
k2 <- korpopmap2
k3 <- korpopmap3
k2@data[c("C행정구역별_읍면동", "행정구역별_읍면동")]
k3@data[c("C행정구역별_읍면동", "행정구역별_읍면동")]
View(k3)
#강남구 데이터 뽑기
guname <- '강동구'
gucode <- k2@data[k2@data$name == guname, "code.data"]
# 강남구: 11230
pattern <- paste0('^', gucode)
grepD<-grep(pattern,k3@data$code.data)
k3@data<-k3@data[grepD,]
k3@polygons<-k3@polygons[grepD]
View(k3@polygons)
#강남구 데이터 저장
k3@data$name<-gsub('·','',k3@data$name)
colnames(DONG)<-c('구별','name','일인가구')
dong <- DONG %>%filter(구별=='강동구')
k3@data<-merge(k3@data,dong,by.x='name',sort=FALSE)
mymap <- k3@data
mypalette <- colorNumeric(palette ='Set3' , domain = k3@data$'일인가구')
mypopup <- paste0(mymap$name,'<br> 1인가구: ',k3@data$'일인가구')
#지도 출력
map7 <- NULL #이전에 담겨져 있는 것이 있다면 해제시키는 것
map7<-leaflet(k3) %>%
addTiles() %>%
setView(lat=37.52711, lng=126.987517, zoom=12) %>%
addPolygons(stroke =FALSE,
fillOpacity = .7,
popup = mypopup,
color = ~mypalette(k3@data$일인가구)) %>%
addLegend( values = ~k3@data$일인가구,
pal = mypalette ,
title = '인구수',
opacity = 1)
map7
View(mymap)
