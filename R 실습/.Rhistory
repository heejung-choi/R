#"Happy Birthday to You"
s_v1<-sapply(v1,function(v){ paste(v,sep="")})
nchar(s_v1)
length(s_v1)
#문제 6 -  'Happy', 'Birthday', 'to', You'로 구성된 5텍스트 벡터 v1 생성한 후
#벡터의 길이와 문자 개수의 합을 계산한다.
v1<-c('Happy','Birthday','to','You')
nchar(v1)
length(v1)
#문제 7 - 6번 문제에서 생성한 텍스트 벡터 v1의 개별 원소들을 연결하여
#다음과 같은 텍스트 벡터를 생성한다. 연결된 새로운 텍스트 벡터의
#길이와 문자 개수의 합을 계산한다.
#"Happy Birthday to You"
s_v1<-sapply(v1,function(v){paste(v,sep="")})
s_v1
#문제 7 - 6번 문제에서 생성한 텍스트 벡터 v1의 개별 원소들을 연결하여
#다음과 같은 텍스트 벡터를 생성한다. 연결된 새로운 텍스트 벡터의
#길이와 문자 개수의 합을 계산한다.
#"Happy Birthday to You"
s_v1<-sapply(v1,function(v) {paste(v,sep="")})
s_v1
#백터에 들어있는 전체 갯수
length(flower)
#문자 길이
nchar(flower)
sapply(flower, function(d) paste("-",d,"-", sep=""))
#문제 7 - 6번 문제에서 생성한 텍스트 벡터 v1의 개별 원소들을 연결하여
#다음과 같은 텍스트 벡터를 생성한다. 연결된 새로운 텍스트 벡터의
#길이와 문자 개수의 합을 계산한다.
#"Happy Birthday to You"
paste(v1[1],v1[2])
#문제 7 - 6번 문제에서 생성한 텍스트 벡터 v1의 개별 원소들을 연결하여
#다음과 같은 텍스트 벡터를 생성한다. 연결된 새로운 텍스트 벡터의
#길이와 문자 개수의 합을 계산한다.
#"Happy Birthday to You"
paste(v1[1],v1[2],v1[3])
#문제 7 - 6번 문제에서 생성한 텍스트 벡터 v1의 개별 원소들을 연결하여
#다음과 같은 텍스트 벡터를 생성한다. 연결된 새로운 텍스트 벡터의
#길이와 문자 개수의 합을 계산한다.
#"Happy Birthday to You"
paste(v1[1],v1[2],v1[3],v1[4])
#문제 7 - 6번 문제에서 생성한 텍스트 벡터 v1의 개별 원소들을 연결하여
#다음과 같은 텍스트 벡터를 생성한다. 연결된 새로운 텍스트 벡터의
#길이와 문자 개수의 합을 계산한다.
#"Happy Birthday to You"
s_v1<-paste(v1[1],v1[2],v1[3],v1[4])
nchar(s_v1)
length(s_v1)
a<-substring(ssn,8)
a
#문제 7 - 6번 문제에서 생성한 텍스트 벡터 v1의 개별 원소들을 연결하여
#다음과 같은 텍스트 벡터를 생성한다. 연결된 새로운 텍스트 벡터의
#길이와 문자 개수의 합을 계산한다.
#"Happy Birthday to You"
s_v1<-paste(v1[1],v1[2],v1[3],v1[4])
nchar(s_v1)
length(s_v1)
a<-substring(ssn[1],8)
a
substring(ssn[1],8)<-"*******"
ssn
substring(ssn,8)<-"*******"
ssn
#문제 11 -  다음 주민등록번호 세 개를 ssn 변수에 저장하고,
#		뒤 일곱 자리의 숫자를 '*******'으로 대체한다.
#	"941215-1234567" "850605-2345678" "760830-1357913"
ssn<-c("941215-1234567","850605-2345678","760830-1357913")
substring(ssn,8)<-"*******"
ssn
#문제 7 - 6번 문제에서 생성한 텍스트 벡터 v1의 개별 원소들을 연결하여
#다음과 같은 텍스트 벡터를 생성한다. 연결된 새로운 텍스트 벡터의
#길이와 문자 개수의 합을 계산한다.
#"Happy Birthday to You"
s_v1<-paste(v1[1:4])
nchar(s_v1)
length(s_v1)
#문제 7 - 6번 문제에서 생성한 텍스트 벡터 v1의 개별 원소들을 연결하여
#다음과 같은 텍스트 벡터를 생성한다. 연결된 새로운 텍스트 벡터의
#길이와 문자 개수의 합을 계산한다.
#"Happy Birthday to You"
s_v1<-paste(v1[1],v1[2],v1[3],v1[4])
nchar(s_v1)
length(s_v1)
s_v1<-paste(v1)
s_v1
s_v1<-paste(v1[1],v1[2],v1[3],v1[4])
nchar(s_v1)
length(s_v1)
#문제 11 -  다음 주민등록번호 세 개를 ssn 변수에 저장하고,
#		뒤 일곱 자리의 숫자를 '*******'으로 대체한다.
#	"941215-1234567" "850605-2345678" "760830-1357913"
ssn<-c("941215-1234567","850605-2345678","760830-1357913")
substring(ssn,8)<-"*******"
ssn
#문제 6 -  'Happy', 'Birthday', 'to', You'로 구성된 5텍스트 벡터 v1 생성한 후
#벡터의 길이와 문자 개수의 합을 계산한다.
v1<-c('Happy','Birthday','to','You')
v1
s_v1[[1]]
s_v1[[1]]
v1[[1]]
v1[[1:4]]
z<-paste(v1, sep="")
z
z<-paste(v1, collapese="")
z
z<-paste(v1, collapse="")
z
z<-paste(v1, collapse="" sep=" ")
z<-paste(v1, collapse="" ,sep=" ")
z
z<-paste(v1, collapse=" ")
z
s_v1<-paste(v1, collapse=" ")
v1<-c('Happy','Birthday','to','You')
nchar(v1)
length(v1)
#문제 7 - 6번 문제에서 생성한 텍스트 벡터 v1의 개별 원소들을 연결하여
#다음과 같은 텍스트 벡터를 생성한다. 연결된 새로운 텍스트 벡터의
#길이와 문자 개수의 합을 계산한다.
#"Happy Birthday to You"
s_v1<-paste(v1, collapse=" ")
s_v1
nchar(s_v1)
length(s_v1)
paste(format(today,'오늘은 %Y년 %B %d일 이고 내가 태어난지'),minus,"일째 되는 날이당")
floor(minus)
paste(format(today,'오늘은 %Y년 %B %d일 이고 내가 태어난지'),minus,"일째 되는 날이당")
minus<floor(minus)
floor(minus)
minus<-floor(minus)
paste(format(today,'오늘은 %Y년 %B %d일 이고 내가 태어난지'),minus,"일째 되는 날이당")
#문제 2 - R 언어로 내가 태어난지 며칠이 지났는지 다음 형식으로 출력해 보자.
#오늘은 XXXX년 XX월 XX일 이고 내가 태어난지 XXXX일째되는 날이당
today<-Sys.time()
minus<-floor(today-day)
paste(format(today,'오늘은 %Y년 %B %d일 이고 내가 태어난지'),minus,"일째 되는 날이당")
substring(ssn,8)
#문제 11 -  다음 주민등록번호 세 개를 ssn 변수에 저장하고,
#		뒤 일곱 자리의 숫자를 '*******'으로 대체한다.
#	"941215-1234567" "850605-2345678" "760830-1357913"
ssn<-c("941215-1234567","850605-2345678","760830-1357913")
substring(ssn,8)
substring(ssn,8)<-"*******"
ssn
class(x)
datetime<-c(a1,a2,a3)
x<-strptime(datetime,"%m/%d/%Y %H:%M:%S",tz = "EST5EDT")
class(x)
x<-strptime(datetime,"%m/%d/%Y %H:%M:%S")
class(x)
#문제 4 - 텍스트 '12/25/2020 23:59:59', '1/25/2021 23:59:59', '2/25/2021 23:59:59'를
#데이터프레임의 datetime 변수에 저장한 후 이를 날짜 형식(POSIXlt 객체)으로
#변환한다.
a1<-'12/25/2020 23:59:59'
a2<-'1/25/2021 23:59:59'
a3<-'2/25/2021 23:59:59'
datetime<-c(a1,a2,a3)
x<-strptime(datetime,"%m/%d/%Y %H:%M:%S")
class(x)
format(today, "%y")#두자리 연도만
format(today, "%Y")#네자리 연도
format(today, "%B")
format(today, "%a")# 축약형 요일
format(today, "%A")# 풀네임 요일
datetime<-c(a1,a2,a3)
datetime
source('C:/heejung/Rstudy/dataPrePro1.R', encoding = 'UTF-8', echo=TRUE)
a1<-'12/25/2020 23:59:59'
a2<-'1/25/2021 23:59:59'
a3<-'2/25/2021 23:59:59'
datetime<-c(a1,a2,a3)
str(datetime)
class(datetime)
data.frame(a1,a2,a3)
x<-strptime(datetime,"%m/%d/%Y %H:%M:%S")
class(x)
a1<-'12/25/2020 23:59:59'
a2<-'1/25/2021 23:59:59'
a3<-'2/25/2021 23:59:59'
datetime<-c(a1,a2,a3)
x<-strptime(datetime,"%m/%d/%Y %H:%M:%S")
class(x)
datetime<-c(a1,a2,a3)
dateF<-dataframe(datetime)
dateF<-data.frame(datetime)
dateF
x<-strptime(datetime,"%m/%d/%Y %H:%M:%S")
class(x)
str(strsplit(x=text,split=" "))
source('C:/heejung/Rstudy/dataPrePro1.R', encoding = 'UTF-8', echo=TRUE)
strsplit(x=text,split=" ")[1][1]
a<-strsplit(x=text,split=" ")[1][1],strsplit(x=text,split=" ")[2][1]
a<-c(strsplit(x=text,split=" ")[1][1],strsplit(x=text,split=" ")[2][1])
a
strsplit(x=text,split=" ")[[1]][1] strsplit(x=text,split=" ")[[2]][1]
a<-strsplit(x=text,split=" ")[[1]][1],strsplit(x=text,split=" ")[[1]][2]
a<-list(strsplit(x=text,split=" ")[[1]][1],strsplit(x=text,split=" ")[[1]][2])
a
substring(ssn,8)<-"*******"
ssn
ssn
text2
strsplit(x=text2, split="()+")
strsplit(x=text2, split="( )+")
r3<-gsub("[[:punct:]]|[가-힣]", "", s1)
r3
r4
install.packages("dplyr")
install.packages("ggplot2")
exam <- read.csv("data/csv_exam.csv"
exam %>% filter(class == 2)
exam <- read.csv("data/csv_exam.csv")
exam %>% filter(class == 2)
install.packages(c("dplyr", "ggplot2"))
library(dplyr)
install.packages("ggplot2")
library(ggplot2")
str(ggplot2::mpg)
head(ggplot2::mpg)
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)
exam <- read.csv("data/csv_exam.csv")
str(exam)
dim(exam)
head(exam);tail(exam)
View(exam)
# exam에서 class가 1인 경우만 추출하여 출력
exam %>% filter(class == 1) # [참고] 단축키 [Ctrl+Shit+M]으로 %>% 기호 입력
# 2반인 경우만 추출
exam %>% filter(class == 2)
# 1반이 아닌 경우
exam %>% filter(class != 1)
# 3반이 아닌 경우
exam %>% filter(class != 3)
# 수학 점수가 50점을 초과한 경우
exam %>% filter(math > 50)
# 수학 점수가 50점 미만인 경우
exam %>% filter(math < 50)
# 영어점수가 80점 이상인 경우
exam %>% filter(english >= 80)
# 영어점수가 80점 이하인 경우
exam %>% filter(english <= 80)
# 1반 이면서 수학 점수가 50점 이상인 경우
exam %>% filter(class == 1 & math >= 50)
# 2반 이면서 영어점수가 80점 이상인 경우
exam %>% filter(class == 2 & english >= 80)
# 수학 점수가 90점 이상이거나 영어점수가 90점 이상인 경우
exam %>% filter(math >= 90 | english >= 90)
# 영어점수가 90점 미만이거나 과학점수가 50점 미만인 경우
exam %>% filter(english < 90 | science < 50)
# 목록에 해당되는 행 추출하기
exam %>% filter(class == 1 | class == 3 | class == 5)  # 1, 3, 5 반에 해당되면 추출
# %in% 연산자 이용하기
exam %>% filter(class %in% c(1,3,5))  # 1, 3, 5 반에 해당하면 추출
# 추출한 행으로 데이터 만들기
class1 <- exam %>% filter(class == 1)  # class가 1인 행 추출, class1에 할당
class2 <- exam %>% filter(class == 2)  # class가 2인 행 추출, class2에 할당
mean(class1$math)                      # 1반 수학 점수 평균 구하기
mean(class2$math)                      # 2반 수학 점수 평균 구하기
exam %>% select(math)  # math 추출
exam %>% select(english)  # english 추출
# 여러 변수 추출하기
exam %>% select(class, math, english)  # class, math, english 변수 추출
# 변수 제외하기
exam %>% select(-math)  # math 제외
exam %>% select(-math, -english)  # math, english 제외
# dplyr 함수 조합하기
# class가 1인 행만 추출한 다음 english 추출
exam %>% filter(class == 1) %>% select(english)
# 가독성 있게 줄 바꾸기
exam %>%
filter(class == 1) %>%  # class가 1인 행 추출
select(english)         # english 추출
# 일부만 출력하기
exam %>%
select(id, math) %>%  # id, math 추출
head                  # 앞부분 6행까지 추출
# 일부만 출력하기
exam %>%
select(id, math) %>%  # id, math 추출
head(10)              # 앞부분 10행까지 추출
iris %>% pull(Species)
iris %>% select(Species)
iris %>% select_if(is.numeric)
iris %>% select(-Sepal.Length, -Petal.Length)
# Select column whose name starts with "Petal"
iris %>% select(starts_with("Petal"))
# Select column whose name ends with "Width"
iris %>% select(ends_with("Width"))
# Select columns whose names contains "etal"
iris %>% select(contains("etal"))
# Select columns whose name maches a regular expression
iris %>% select(matches(".t."))
# 오름차순으로 정렬하기
exam %>% arrange(math)  # math 오름차순 정렬
# 내림차순으로 정렬하기
exam %>% arrange(desc(math))  # math 내림차순 정렬
# 정렬 기준 변수 여러개 지정
exam %>% arrange(desc(class), desc(math))  # class 및 math 오름차순 정렬
exam %>% arrange(desc(math)) %>% head(1)
exam %>%
mutate(total = math + english + science) %>%  # 총합 변수 추가
head                                          # 일부 추출
#여러 파생변수 한 번에 추가하기
exam %>%
mutate(total = math + english + science,          # 총합 변수 추가
mean = (math + english + science)/3) %>%   # 총평균 변수 추가
head
exam %>%
mutate(total = math + english + science,          # 총합 변수 추가
mean = total/3) %>%   # 총평균 변수 추가
head
# 일부 추출
# mutate()에 ifelse() 적용하기
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
head
#추가한 변수를 dplyr 코드에 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%  # 총합 변수 추가
arrange(total) %>%                            # 총합 변수 기준 정렬
head                                          # 일부 추출
library(ggplot2)
str(ggplot2::mpg)
head(ggplot2::mpg)
# exam에서 class가 1인 경우만 추출하여 출력
exam %>% filter(class == 1) # [참고] 단축키 [Ctrl+Shit+M]으로 %>% 기호 입력
filter(exam,class==1)#과 동일
# 2반인 경우만 추출
exam %>% filter(class == 2)
# 1반이 아닌 경우
exam %>% filter(class != 1)
# 수학 점수가 50점을 초과한 경우
exam %>% filter(math > 50)
# 수학 점수가 50점 미만인 경우
exam %>% filter(math < 50)
# 영어점수가 80점 이상인 경우
exam %>% filter(english >= 80)
# 영어점수가 80점 이하인 경우
exam %>% filter(english <= 80)
# 1반 이면서 수학 점수가 50점 이상인 경우
exam %>% filter(class == 1 & math >= 50)
# 수학 점수가 90점 이상이거나 영어점수가 90점 이상인 경우
exam %>% filter(math >= 90 | english >= 90)
# 영어점수가 90점 미만이거나 과학점수가 50점 미만인 경우
exam %>% filter(english < 90 | science < 50)
# 목록에 해당되는 행 추출하기
exam %>% filter(class == 1 | class == 3 | class == 5)  # 1, 3, 5 반에 해당되면 추출
# 목록에 해당되는 행 추출하기
exam %>% filter(class == 1 | class == 3 | class == 5) ->a # 1, 3, 5 반에 해당되면 추출
a
exam %>% filter(class %in% c(1,3,5))
# 추출한 행으로 데이터 만들기
class1 <- exam %>% filter(class == 1)  # class가 1인 행 추출, class1에 할당
class2 <- exam %>% filter(class == 2)  # class가 2인 행 추출, class2에 할당
# 추출한 행으로 데이터 만들기
(class1 <- exam %>% filter(class == 1))  # class가 1인 행 추출, class1에 할당
(class2 <- exam %>% filter(class == 2) ) # class가 2인 행 추출, class2에 할당
mean(class1$math)                      # 1반 수학 점수 평균 구하기
mean(class2$math)                      # 2반 수학 점수 평균 구하기
exam %>% select(math)  # math 추출
exam %>% select(english)  # english 추출
# 여러 변수 추출하기
exam %>% select(class, math, english)  # class, math, english 변수 추출
# 여러 변수 추출하기
exam %>% select(class, math, english)  # class, math, english 변수 추출
# 변수 제외하기
exam %>% select(-math)  # math 제외
exam %>% select(-math, -english)  # math, english 제외
# dplyr 함수 조합하기
# class가 1인 행만 추출한 다음 english 추출
exam %>% filter(class == 1) %>% select(english)
# 가독성 있게 줄 바꾸기
exam %>%
filter(class == 1) %>%  # class가 1인 행 추출
select(english)         # english 추출
# 일부만 출력하기
exam %>%
select(id, math) %>%  # id, math 추출
head                  # 앞부분 6행까지 추출
# 일부만 출력하기
exam %>%
select(id, math) %>%  # id, math 추출
head(10)              # 앞부분 10행까지 추출
iris
iris %>% pull(Species)
iris %>% select(Species)
iris %>% pull(Species)
iris %>% select_if(is.numeric)
iris %>% select(Species)
iris
iris %>% select(-Sepal.Length, -Petal.Length)
# Select column whose name starts with "Petal"
iris %>% select(starts_with("Petal"))#q
# Select columns whose names contains "etal"
iris %>% select(contains("etal"))
# Select columns whose name maches a regular expression
iris %>% select(matches(".t."))
# 정렬 기준 변수 여러개 지정
exam %>% arrange(desc(class), desc(math))  # class 및 math 오름차순 정렬
#첫번째 정렬기준 class로 먼저 하고 그것이 같은 것은 두번째 정렬기준으로
exam %>% arrange(desc(math)) %>% head(1)
exam %>%
mutate(total = math + english + science) %>%  # 총합 변수 추가
head                                          # 일부 추출
exam %>%
mutate(total = math + english + science) %>%  # 총합 변수 추가
head
#mutate: 변형하다라는 의미/ 없었던 컬럼을 새로 추가
exam %>%
mutate(total = math + english + science) %>%  # 총합 변수 추가
head                                          # 일부 추출
#여러 파생변수 한 번에 추가하기
exam %>%
mutate(total = math + english + science,          # 총합 변수 추가
mean = (math + english + science)/3) %>%   # 총평균 변수 추가
head
#여러 파생변수 한 번에 추가하기
exam %>%
mutate(total = math + english + science,          # 총합 변수 추가
mean = floor((math + english + science)/3)) %>%   # 총평균 변수 추가
head
exam %>%
mutate(total = math + english + science,          # 총합 변수 추가
mean = total/3) %>%   # 총평균 변수 추가
head
# 일부 추출
# mutate()에 ifelse() 적용하기
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
head
#추가한 변수를 dplyr 코드에 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%  # 총합 변수 추가
arrange(total) %>%                            # 총합 변수 기준 정렬
head                                          # 일부 추출
#추가한 변수를 dplyr 코드에 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%  # 총합 변수 추가
arrange(desc(total)) %>%                            # 총합 변수 기준 정렬
head                                          # 일부 추출
#다음 문제를 dplyr 패키지로 해결하시오.
#파일명은 dplyr_lab1.R 로 저장한다.
#(emp 데이터 셋은 emp.csv 파일을 읽어서 생성한다.)
emp<-read.csv("data/emp.csv")
emp
#[문제1] 업무가 MANAGER 인 직원들의 정보를 출력한다.
emp %>% filter(job=MANAGER)
#[문제1] 업무가 MANAGER 인 직원들의 정보를 출력한다.
emp %>% filter(job='MANAGER')
#[문제1] 업무가 MANAGER 인 직원들의 정보를 출력한다.
emp %>% filter(job=='MANAGER')
#[문제2] emp 에서 사번, 이름, 월급을 출력한다.
emp %>% select(-empno)
#[문제2] emp 에서 사번, 이름, 월급을 출력한다.
emp %>% select(empno,ename,sal)
#[문제3] emp 에서 사번만 빼고 출력한다.
emp %>% select(-empno)
#[문제4] emp 에서 ename 과 sal컬럼만 출력한다.
emp %>% select(ename,sal)
#[문제5] 업무별 직원수를 출력한다.
emp %>% group_by(job) %>% summarise(count=n())
emp %>% group_by(job) %>% summarise
emp %>% group_by(job) %>% summarise(count=n())
#[문제6] 월급이 1000 이상이고 3000이하인 사원들의 이름, 월급, 부서번호를 출력한다.
exam %>% filter(sal>=1000&sal<=3000) %>% select(ename,sal,deptno)
#[문제6] 월급이 1000 이상이고 3000이하인 사원들의 이름, 월급, 부서번호를 출력한다.
exam %>% filter(sal>=1000 & sal<=3000) %>% select(ename,sal,deptno)
exam %>% filter(sal>=1000 & sal<=3000)
exam %>% filter(sal>=1000)
#[문제6] 월급이 1000 이상이고 3000이하인 사원들의 이름, 월급, 부서번호를 출력한다.
emp %>% filter(sal>=1000& sal<=3000) %>% select(ename,sal,deptno)
#[문제7] emp 에서 업무이 ANALYST 가 아닌 사원들의 이름, 직업, 월급을 출력한다.
emp %>% filter(job!='ANALYST') %>% select(ename,job,sal)
#[문제8] emp 에서 업무가 SALESMAN 이거나 ANALYST 인
#사원들의 이름, 직업을 출력한다.
emp %>% filter(job=='SALESMAN'|job=='ANALYST') %>% select(ename,job)
#[문제10] 월급이 적은 순으로 모든 직원 정보를 출력한다.
emp %>% arrange(sal)
#[문제11] 월급이 제일 많은 직원의 정보를 출력한다.
emp %>% arrange(desc(sal)) %>% head(1)
#[문제12] 직원들의 월급을 보관하고 있는 컬럼의 컬럼명을 sal에서 salary 로 변경하고
#커미션 정보 저장한 컬럼의 컬럼명를 comm 에서 commrate 로 변경한 후
#empnew 라는 새로운 데이터셋을 생성한다.
rename(exam, salary=sal, commrate=comm)->empnew
#[문제12] 직원들의 월급을 보관하고 있는 컬럼의 컬럼명을 sal에서 salary 로 변경하고
#커미션 정보 저장한 컬럼의 컬럼명를 comm 에서 commrate 로 변경한 후
#empnew 라는 새로운 데이터셋을 생성한다.
names(exam)
rename(emp, salary=sal, commrate=comm)->empnew
empnew
#[문제14] 각 직원들 이름의 문자 길이를 저장하는 enamelength 라는 컬럼을 추가한 다음에
#이름 길이가 짧은 순으로 직원의 이름을 출력한다.
emp
#[문제14] 각 직원들 이름의 문자 길이를 저장하는 enamelength 라는 컬럼을 추가한 다음에
#이름 길이가 짧은 순으로 직원의 이름을 출력한다.
emp %>% select(ename.length)
source('C:/heejung/Rstudy/dplyr_lab1.R', encoding = 'UTF-8', echo=TRUE)
length(emp$ename)
nchar(as.character(ename))
emp %>% nchar(as.character(ename))
nchar(as.character(emp$ename))
#[문제14] 각 직원들 이름의 문자 길이를 저장하는 enamelength 라는 컬럼을 추가한 다음에
#이름 길이가 짧은 순으로 직원의 이름을 출력한다.
emp %>% select(nchar(as.character(ename)))
#[문제14] 각 직원들 이름의 문자 길이를 저장하는 enamelength 라는 컬럼을 추가한 다음에
#이름 길이가 짧은 순으로 직원의 이름을 출력한다.
emp %>%mutate(enamelength= nchar(as.character(ename)))
#[문제14] 각 직원들 이름의 문자 길이를 저장하는 enamelength 라는 컬럼을 추가한 다음에
#이름 길이가 짧은 순으로 직원의 이름을 출력한다.
emp %>%mutate(enamelength= nchar(as.character(ename))) %>% arrange(enamelength) %>% select(ename)
