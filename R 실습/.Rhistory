content <- result$retweet_text
content
result
result<-head(final, 10)
result
text1
textU <- unlist(text2)
textU<-gsub("[Aa]", "",textU)
textU<-gsub("[Aa]", "",textU)textU<-gsub(" ", "",textU)
textU <- unlist(text2)
textU<-gsub("[Aa]", "",textU)
textU<-gsub("[[:lower:][:upper:][:digit:][:punct:][:cntrl:]]", "",textU)
textU<-gsub("위|위장|위염|위암", "",textU)
textU<-gsub("음식|건강|좋은|스틱|효능|자극|도움|섭취|오늘|증상", "",textU)
textU<-gsub("식품|선물|추천|부모님|제품|하루|안녕|소화", "",textU)
textU<-gsub("식품|선물|추천|부모님|제품|하루|안녕|소화", "",textU)
textU
textU <- Filter(function(x) {nchar(x) >= 2}, textU)
word_table <- table(textU)
final <- sort(word_table, decreasing = T)
final
result<-head(final, 10)
result
text2 <- extractNoun(finish2) # 위와 결과는 같은데 이걸로 사용
text2
textU <- unlist(text2)
word_table <- table(textU)
final <- sort(word_table, decreasing = T)
final
result<-head(final, 10)
result
textU<-gsub("[Aa]", "",textU)
textU<-gsub("[[:lower:][:upper:][:digit:][:punct:][:cntrl:]]", "",textU)
textU<-gsub("위|위장|위염|위암", "",textU)
textU<-gsub("음식|건강|좋은|스틱|효능|자극|도움|섭취|오늘|증상", "",textU)
textU<-gsub("식품|선물|추천|부모님|제품|하루|안녕|소화", "",textU)
textU
textU <- Filter(function(x) {nchar(x) >= 2}, textU)
word_table <- table(textU)
final <- sort(word_table, decreasing = T)
final
result<-head(final, 50)
result
result<-head(final, 10)
result
textU<-gsub("[으로,정보]")
textU<-gsub("[으로,정보]","",textU)
textU
textU <- Filter(function(x) {nchar(x) >= 2}, textU)
word_table <- table(textU)
final <- sort(word_table, decreasing = T)
final
result<-head(final, 10)
result
text2
textU <- unlist(text2)
textU
textU<-gsub("[Aa]", "",textU)
textU<-gsub("[[:lower:][:upper:][:digit:][:punct:][:cntrl:]]", "",textU)
textU
text2 <- extractNoun(finish2) # 위와 결과는 같은데 이걸로 사용
textU <- unlist(text2)
textU
textU<-strsplit(textU, split= ",")
textU
text2 <- extractNoun(finish2) # 위와 결과는 같은데 이걸로 사용
textU<-strsplit(text2, split= ",")
textU
textU <- unlist(text2)
text3<-strsplit(text2, split= ",")
text4 <- unlist(text3)
text4
text3<-strsplit(text2, split= ",")
text4 <- unlist(text3)
text2 <- extractNoun(finish2) # 위와 결과는 같은데 이걸로 사용
text3<-strsplit(text2, split= ",")
text3
textU <- unlist(text2)
text
text2
text2 <- extractNoun(finish2) # 위와 결과는 같은데 이걸로 사용
textU <- unlist(text2)
textU
word_table <- table(textU)
word_table
ex<-gsub("[Aa]", "",word_table)
ex
word_table <- table(textU)
word_table
ex<-gsub("[Aa]","",word_table)
ex
textU <- unlist(text2)
textU
textU<-gsub("[Aa]", "",textU)
textU
textU<-gsub("[A-Z]", "",textU)
textU<-gsub("[A-Z][a-z]","",textU)
textU
textU<-gsub("[[:lower:][:upper:][:digit:][:punct:][:cntrl:]]", "",textU)
textU
textU<-gsub("[으로,정보,◆,위,위장,위염,위암,]","",textU)
textU
textU <- Filter(function(x) {nchar(x) >= 2}, textU)
word_table <- table(textU)
final <- sort(word_table, decreasing = T)
final
result<-head(final, 50)
result
query <- URLencode(iconv("위에좋은요리","euc-kr","UTF-8"))
<-
#1) 위염/ 식이지장염/ 위-식도역류병
#2) 대장암/ 췌장암
searchUrl<- "https://openapi.naver.com/v1/search/blog.xml"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("위에좋은요리","euc-kr","UTF-8"))
#검색어 입력 부분
url <- paste0(searchUrl, "?query=", query, "&display=100")
# # display=100 100개를 받아오겠어 라는 의미
doc <- GET(url, add_headers("Content_Type" = "application/xml","X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text<- xpathSApply(doc2, "//item/description", xmlValue)
text7<-text
finish2<-append(finish2,text7)
text7
finish2
text2 <- extractNoun(finish2) # 위와 결과는 같은데 이걸로 사용
textU <- unlist(text2)
textU<-gsub("[A-Z][a-z]","",textU)
textU<-gsub("[[:lower:][:upper:][:digit:][:punct:][:cntrl:]]", "",textU)
textU<-gsub("[으로,정보,◆,위,위장,위염,위암,]","",textU)
textU
textU <- Filter(function(x) {nchar(x) >= 2}, textU)
word_table <- table(textU)
final <- sort(word_table, decreasing = T)
final
result<-head(final, 50)
result
View(final)
textU<-gsub("[오늘,부모님,건강에,도움,소화,안녕,스틱,음식]","",textU)
textU<-gsub("[]","",textU)
("*(건강)","",textU)
textU<-gsub("*[건강]","",textU)
textU
textU <- Filter(function(x) {nchar(x) >= 2}, textU)
word_table <- table(textU)
final <- sort(word_table, decreasing = T)
result<-head(final, 50)
result
View(final)
textU<-gsub("*[건강|버섯]","",textU)
textU
textU <- Filter(function(x) {nchar(x) >= 2}, textU)
word_table <- table(textU)
final <- sort(word_table, decreasing = T)
View(final)
text2 <- extractNoun(finish2) # 위와 결과는 같은데 이걸로 사용
textU <- unlist(text2)
#text3<-strsplit(text2, split= ",")
textU<-gsub("[A-Z][a-z]","",textU)
textU<-gsub("[[:lower:][:upper:][:digit:][:punct:][:cntrl:]]", "",textU)
textU<-gsub("*[건강|버섯]","",textU)
textU
textU <- Filter(function(x) {nchar(x) >= 2}, textU)
word_table <- table(textU)
final <- sort(word_table, decreasing = T)
View(final)
textU <- unlist(text2)
#text3<-strsplit(text2, split= ",")
textU<-gsub("[A-Z][a-z]","",textU)
textU<-gsub("[[:lower:][:upper:][:digit:][:punct:][:cntrl:]]", "",textU)
textU<-gsub("*[건강|버섯]","",textU)
textU
textU <- Filter(function(x) {nchar(x) >= 2}, textU)
word_table <- table(textU)
final <- sort(word_table, decreasing = T)
View(final)
textU<-gsub("*[건강|식품|선물|추천|제품|좋은|도움]","",textU)
textU<-gsub("*[소화|안녕|음식|스틱|하루|어이날|정보|효과]","",textU)
textU
textU <- Filter(function(x) {nchar(x) >= 2}, textU)
word_table <- table(textU)
final <- sort(word_table, decreasing = T)
View(final)
text2 <- extractNoun(finish2) # 위와 결과는 같은데 이걸로 사용
textU <- unlist(text2)
#text3<-strsplit(text2, split= ",")
textU<-gsub("[A-Z][a-z]","",textU)
textU<-gsub("[[:lower:][:upper:][:digit:][:punct:][:cntrl:]]", "",textU)
textU<-gsub("*[건강|식품|선물|추천|제품|좋은|도움]","",textU)
textU<-gsub("*[소화|안녕|음식|스틱|하루|어이날|정보|효과]","",textU)
textU
textU <- Filter(function(x) {nchar(x) >= 2}, textU)
word_table <- table(textU)
final <- sort(word_table, decreasing = T)
View(final)
finish<-""
finish
#1) 위염/ 식이지장염/ 위-식도역류병
#2) 대장암/ 췌장암
searchUrl<- "https://openapi.naver.com/v1/search/blog.xml"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("위에좋은요리","euc-kr","UTF-8"))
#검색어 입력 부분
url <- paste0(searchUrl, "?query=", query, "&display=100")
# # display=100 100개를 받아오겠어 라는 의미
doc <- GET(url, add_headers("Content_Type" = "application/xml","X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text<- xpathSApply(doc2, "//item/description", xmlValue)
finish<-""
finish<-append(text1,text2)
finish<-append(finish,text3)
finish<-append(finish,text4)
finish<-append(finish,text5)
finish<-append(finish,text6)
finish<-append(finish,text7)
text2 <- extractNoun(finish) # 위와 결과는 같은데 이걸로 사용
textU <- unlist(text2)
#text3<-strsplit(text2, split= ",")
textU<-gsub("[A-Z][a-z]","",textU)
textU<-gsub("[[:lower:][:upper:][:digit:][:punct:][:cntrl:]]", "",textU)
textU<-gsub("*[건강|식품|선물|추천|제품|좋은|도움]","",textU)
textU<-gsub("*[소화|안녕|음식|스틱|하루|어이날|정보|효과]","",textU)
textU <- Filter(function(x) {nchar(x) >= 2}, textU)
word_table <- table(textU)
final <- sort(word_table, decreasing = T)
View(final)
textU <- unlist(text2)
#text3<-strsplit(text2, split= ",")
textU<-gsub("[A-Z][a-z]","",textU)
textU<-gsub("[[:lower:][:upper:][:digit:][:punct:][:cntrl:]]", "",textU)
textU <- unlist(text2)
#text3<-strsplit(text2, split= ",")
textU<-gsub("[A-Z][a-z]","",textU)
textU<-gsub("[[:lower:][:upper:][:digit:][:punct:][:cntrl:]]", "",textU)
textU<-gsub("*[건강]","",textU)
textU
textU <- Filter(function(x) {nchar(x) >= 2}, textU)
word_table <- table(textU)
final <- sort(word_table, decreasing = T)
View(final)
result<-head(final, 50)
textU <- unlist(text2)
#text3<-strsplit(text2, split= ",")
textU<-gsub("[A-Z][a-z]","",textU)
textU<-gsub("[[:lower:][:upper:][:digit:][:punct:][:cntrl:]]", "",textU)
textU<-gsub("*[건강]","",textU)
textU<-gsub("*[식품]","",textU)
textU<-gsub("[선물,추천,제품,좋은,오늘,부모님,도움,소화,음식,안녕,스틱,하루
어버이날,정보,효과,효능,식품으로,위식품,요리,소개,위염,구매]","",textU)
textU
textU <- Filter(function(x) {nchar(x) >= 2}, textU)
word_table <- table(textU)
final <- sort(word_table, decreasing = T)
View(final)
textU <- unlist(text2)
text2 <- extractNoun(finish) # 위와 결과는 같은데 이걸로 사용
library(KoNLP)
text2 <- extractNoun(finish) # 위와 결과는 같은데 이걸로 사용
install.packages("KoNLP")
library(KoNLP)
text2 <- extractNoun(finish) # 위와 결과는 같은데 이걸로 사용
textU <- unlist(text2)
finish
text2 <- extractNoun(finish) # 위와 결과는 같은데 이걸로 사용
# 도라지
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+geom_label_repel(family="")
library(dplyr)
# 도라지
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+geom_label_repel(family="")
food1<-read.csv(file="C:/heejung/Rstudy/도라지.csv",header=T)
# 도라지
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+geom_label_repel(family="")
library(ggplot2)
# 도라지
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+geom_label_repel(family="")
library(dplyr)
# 도라지
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()
ggsave('food1.png', width=16, height=9, dpi=100)
ggsave('food1.png', width=16, height=9, dpi=1000)
ggsave('food1.png', width=160, height=90, dpi=1000)
ggsave('food1.png', width=160, height=90, dpi=1000)
ggsave('food1.png', width=160, height=90, dpi=1000)
ggsave('food11.png', width=160, height=90, dpi=1000)
# 도라지
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()
ggsave('food11.png', width=160, height=90, dpi=1000)
ggsave('food11.png', width=160, height=90, dpi=1000)
ggsave('food11.png', width=160, height=90, dpi=300)
ggsave('food11.png', width=16, height=9, dpi=100)
ggsave('food1.png', width=16, height=9, dpi=100)
ggsave('food1.png', width=16, height=10, dpi=100)
# 도라지 windowsFonts()
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()
# 도라지
windowsFonts()
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw(text=element_text(size=16))
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw+theme(text=element_text(size=16))
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme(text=element_text(size=16))
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw(text=element_text(size=16))
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme(text=element_text(size=16))+theme_bw
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw(text=element_text(size=16))
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme(text=element_text(size=16))
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme(text=element_text(size=16),family="Comic Sans MS")
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme(text=element_text(size=16),family="Comic Sans MS")
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme(text=element_text(size=16),family="Comic Sans MS")
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+        theme(text=element_text(size=16,
#       family="Comic Sans MS"))
#       family="CM Roman"))
#       family="TT Times New Roman"))
#       family="Sans"))
family="Serif"))
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme(text=element_text(size=16,family="Serif"))
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()
# 배
food1<-read.csv(file="C:/heejung/Rstudy/배.csv",header=T)
ggplot(food1,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()
# 배
food2<-read.csv(file="C:/heejung/Rstudy/배.csv",header=T)
food2
# 배
food2<-read.csv(file="C:/heejung/Rstudy/배.csv",header=T)
food2
# 배
food2<-read.csv(file="C:/heejung/Rstudy/배.csv",header=T)
food2
ggplot(food1,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()
food2
ggplot(food1,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()
ggplot(food2,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()
ggsave('food2.png', width=16, height=10, dpi=100)
ggsave('food2.png', width=16, height=16, dpi=100)
ggplot(food2,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10))
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()
ggplot(food2,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10))
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()
ggplot(food2,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),family='휴면옛체')
ggplot(food2,aes(x=배,y=영양소명))+geom_bar(stat="identity",
fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),family=휴면옛체)
font()
family()
?windowsFonts
windowsFonts()
windowsFonts()
ggplot(food2,aes(x=배,y=영양소명))+geom_bar(stat="identity",
fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),family=lett)
windowsFonts(lett=windowsFont("serif"))
ggplot(food2,aes(x=배,y=영양소명))+geom_bar(stat="identity",
fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),family=lett)
ggplot(food2,aes(x=배,y=영양소명))+geom_bar(stat="identity",
fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),family="lett")
windowsFonts(lett=windowsFont("serif"))
lett
lett()
windowsFonts(lett)
ggplot(food2,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),family="lett")
ggplot(food2,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10,family="lett"),axis.title=element_text(size=10))
food3<-read.csv(file="C:/heejung/Rstudy/배.csv",header=T)
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10,family="lett"),axis.title=element_text(size=10))
windowsFonts(lett=windowsFont("휴면옛체"))
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10,family="lett"),axis.title=element_text(size=10))
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10,family="lett"),axis.title=element_text(size=10))
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10,family="lett"),axis.title=element_text(size=10,family="lett"))
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10,family="lett"),axis.title=element_text(size=10,family="lett"))
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10,family="lett"),axis.title=element_text(size=10,family="lett"))
windowsFonts(lett=windowsFont("휴면옛체"))
lett
windowsFonts(lett)
food3<-read.csv(file="C:/heejung/Rstudy/배.csv",header=T)
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10,family="lett"),axis.title=element_text(size=10,family="lett"))
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10,family=Serif),axis.title=element_text(size=10,family="lett"))
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10,family="Serif"),axis.title=element_text(size=10,family="lett"))
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="arial",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10,family="arial"),axis.title=element_text(size=10,family="lett"))
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="arial",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10,family="arial"),axis.title=element_text(size=10,family="lett"))
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10,family="arial"),axis.title=element_text(size=10,family="arial"))
windowsFonts(lett=windowsFont("arial"))
windowsFonts(lett=windowsFont("1훈떡볶이 보통"))
windowsFonts(lett=windowsFont("1훈떡볶이"))
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10,family="lett"),axis.title=element_text(size=10,family="lett"))
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position = "top")
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")++
geom_text(aes(label=Weight), vjust=1.5, colour="white")
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")++
geom_text(aes(label=영양소명), vjust=1.5, colour="white")
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=영양소명), vjust=1.5, colour="white")
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1.5, colour="black")
ggplot(food3,aes(x=영양소명,y=배))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1.5, colour="black")
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1.5, colour="black")
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=-2, colour="black")
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1.5, colour="black")
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1, colour="black")
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1, colour="grey")
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1, colour="black")
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1, colour="grey")
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1, colour="grey" ,size=4)
ggplot(food3,aes(x=배,y=영양소명))+
geom_bar(stat="identity")+
theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+
geom_text(aes(label=배), vjust=1, colour="grey" ,size=4) +
scale_fill_brewer(palette="Pastel1")
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1, colour="black")
?geom_bar
?geom_text
+geom_text(aes(label=배), vjust=1, colour="black", check_overlap=TRUE)
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1, colour="black",check_overlap=TRUE)
install.packages('ggrepel')
library('ggrepel')
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1, colour="black",check_overlap=TRUE)+
geom_text_repel()
library('ggrepel')
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1, colour="black",check_overlap=TRUE)+
geom_text_repel()
?geom_text
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1, colour="black",check_overlap=TRUE)
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1.2, colour="black",check_overlap=TRUE)
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=0, colour="black",check_overlap=TRUE)
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=1, colour="black",check_overlap=TRUE)
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=0.1, colour="black",check_overlap=TRUE)
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=0.2, colour="black",check_overlap=TRUE)
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=0.3, colour="black",check_overlap=TRUE)
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=0.3, colour="grey",check_overlap=TRUE)
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=5),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=0.3, colour="grey",check_overlap=TRUE)
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=1),legend.position="top")+geom_text(aes(label=배), vjust=0.3, colour="grey",check_overlap=TRUE)
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=0.3, colour="grey",check_overlap=TRUE)
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=0.3, colour="#454140",check_overlap=TRUE)
ggplot(food3,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=0.3, colour="grey",check_overlap=TRUE)
# 도라지
food1<-read.csv(file="C:/heejung/Rstudy/도라지.csv",header=T)
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=0.3, colour="grey",check_overlap=TRUE)
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=도라지), vjust=0.3, colour="grey",check_overlap=TRUE)
ggsave('food1.png', width=16, height=10, dpi=100)
# 배
food2<-read.csv(file="C:/heejung/Rstudy/배.csv",header=T)
ggplot(food2,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=0.3, colour="grey",check_overlap=TRUE)
# 생강
food3<-read.csv(file="C:/heejung/Rstudy/생강.csv",header=T)
ggplot(food3,aes(x=생강,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=생강), vjust=0.3, colour="grey",check_overlap=TRUE)
ggplot(food2,aes(x=배,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=배), vjust=0.3, colour="grey",check_overlap=TRUE)
ggsave('food2.png', width=16, height=10, dpi=100)
ggplot(food3,aes(x=생강,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+geom_text(aes(label=생강), vjust=0.3, colour="grey",check_overlap=TRUE)
ggsave('food3.png', width=16, height=10, dpi=100)
#무
food4<-read.csv(file="C:/heejung/Rstudy/무.csv",header=T)
ggplot(food4,aes(x=무,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+
geom_text(aes(label=무), vjust=0.3, colour="grey",check_overlap=TRUE)
ggsave('food4.png', width=16, height=10, dpi=100)
ggsave('food4.png', width=16, height=10, dpi=100)
#마늘
food5<-read.csv(file="C:/heejung/Rstudy/마늘.csv",header=T)
ggplot(food4,aes(x=마늘,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+
geom_text(aes(label=마늘), vjust=0.3, colour="grey",check_overlap=TRUE)
ggsave('food5.png', width=16, height=10, dpi=100)
ggplot(food4,aes(x=마늘,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+
geom_text(aes(label=마늘), vjust=0.3, colour="grey",check_overlap=TRUE)
#마늘
food5<-read.csv(file="C:/heejung/Rstudy/마늘.csv",header=T)
food5
ggplot(food5,aes(x=마늘,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=10),axis.title=element_text(size=10),legend.position="top")+
geom_text(aes(label=마늘), vjust=0.3, colour="grey",check_overlap=TRUE)
ggsave('food5.png', width=16, height=10, dpi=100)
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=30),axis.title=element_text(size=30),legend.position="top")+geom_text(aes(label=도라지), vjust=0.3, colour="grey",check_overlap=TRUE)
ggsave('food11.png', width=16, height=10, dpi=100)
ggsave('food11.png', width=16, height=10, dpi=100)
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=30),axis.title=element_text(size=30),legend.position="top")+geom_text(size=30,aes(label=도라지), vjust=0.3, colour="grey",check_overlap=TRUE)
ggsave('food11.png', width=16, height=10, dpi=100)
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=30),axis.title=element_text(size=5),legend.position="top")+geom_text(size=30,aes(label=도라지), vjust=0.3, colour="grey",check_overlap=TRUE)
ggsave('food11.png', width=16, height=10, dpi=100)
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=30),axis.title=element_text(size=30),legend.position="top")+geom_text(size=5,aes(label=도라지), vjust=0.3, colour="grey",check_overlap=TRUE)
ggsave('food11.png', width=16, height=10, dpi=100)
ggplot(food1,aes(x=도라지,y=영양소명))+geom_bar(stat="identity",fill=terrain.colors(20))+theme_bw()+
theme(axis.text=element_text(size=30),axis.title=element_text(size=30),legend.position="top")+geom_text(size=10,aes(label=도라지), vjust=0.3, colour="grey",check_overlap=TRUE)
ggsave('food11.png', width=16, height=10, dpi=100)
ggsave('food11.png', width=16, height=10, dpi=100)
