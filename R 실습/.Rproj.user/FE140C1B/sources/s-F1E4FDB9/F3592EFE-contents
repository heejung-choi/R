# 날짜와 시간 관련 기능을 지원하는 함수들

Sys.Date()
Sys.time()

# 어떤 객체 타입인지 보고싶다면 class 
# 구조를 확인하고 싶다면 str
class(Sys.Date()) #return 값 :"Date"
class(Sys.time()) #return 값: "POSIXct" "POSIXt" 
# ->1970 1 1 0시부터 시간을 계산하는  시간 객체이다.

# is. ~이냐? #as. DATE형으로 변환해줘~
as.Date("2020-04-15") 
as.Date("2020/04/15")
as.Date("2020,04,15")# -와 /는 지원하지만 , 는 지원하지 않는다.
# format 문자열을 지정하면 사용할 수 있다.
as.Date("15-04-2020")#자동으로 앞부터 년,월,일로 인식한다.

as.Date("2020,04,15", format="%Y,%m,%d")
as.Date("15-04-2020", format="%d-%m-%Y")
#소문자(m) 월 대문자(M) 분으로 인식

(today <- Sys.Date())#가로를 해줘서 출력까지 같이하게 해준다.
format(today, "%Y년 %m월 %d일%")
format(today, "%d일 %B %Y년") #대문자 B는 월을 풀네임으로
format(today, "%y")#두자리 연도만
format(today, "%Y")#네자리 연도
format(today, "%B")
format(today, "%a")# 축약형 요일
format(today, "%A")# 풀네임 요일
weekdays(today) 
months(today) 
quarters(today)
unclass(today)  # 1970-01-01을 기준으로 얼마나 날짜가 지났지는 지의 값을 가지고 있다.
Sys.Date()
Sys.time()
Sys.timezone()# Asia/Seoul

#월에서 두자리든 한자리든 상관하지 않는다.
as.Date('1/15/2018',format='%m/%d/%Y') # format 은 생략 가능
as.Date('1/15/18',format='%m/%d/%y')
as.Date('4월 26, 2018',format='%B %d, %Y')
as.Date('110228',format='%d%b%y') #NA b는 월이라는 것까지 나타내는 것이기 때문에 아래 2개와 같이 바꾸면 된다.
as.Date('112월28',format='%d%b%y')
as.Date('110228',format='%d%m%y')

Sys.setlocale("LC_TIME","English") #영어 기준으로 바꿔준다.
Sys.setlocale()#원상복구 다시 한국어 기준으로..


x1 <- "2019-01-10 13:30:41"
# 문자열을 날짜형으로
as.Date(x1, "%Y-%m-%d %H:%M:%S")#as.Date는 시분초를 무시한다.  
# 문자열을 날짜+시간형으로
strptime(x1, "%Y-%m-%d %H:%M:%S") # format 문자열 지정은 필수 / 이경우 연월일 시분초를 잘 나타내 준다.
strptime('2019-08-21 14:10:30', "%Y-%m-%d %H:%M:%S")

start <- as.Date("2020-01-01")
end <- as.Date("2021-01-01")
seq(start, end, 1) # 1일씩 증가
seq(start, end, "day") # 1일씩 증가
seq(start, end, "week") # 1주씩 증가
seq(start, end, "month") # 1달씩 증가
seq(start, end, "year") # 1년씩 증가
seq(start, end, "3 month") # 3달씩 증가
seq(start, end, length.out=7)


x2 <- "20200601"
as.Date(x2, "%Y%m%d")
datetime<-strptime(x2, "%Y%m%d")#datetime에 시간정보를 안 넣으면 시간정보를 빼고 나머지를 출력해준다.
str(datetime)

# Date 객체는 날짜만 나타낼 수 있으며 시간처리 불가
# 날짜와 시간을 함께 처리하려면 POSIXct 또는 POSIXlt 타입의 객체 사용

pct <- as.POSIXct("2020/04/15 11:30:20") # 표준 포맷인 경우 따로 포맷지정을 하지 않아도 된다.
plt <- as.POSIXlt("2020/04/15 11:30:20")
pct
plt
class(pct) #"POSIXct" "POSIXt" continuous time
class(plt) #"POSIXlt" "POSIXt" list time
as.integer(pct)
as.integer(plt)
unclass(plt)
plt$sec
plt$min
plt$hour
plt$mday 
plt$mon # 0 - 1월
plt$year # 1900을 뺀 값
plt$wday # 0-일요일 #수요일이므로 
# as.POSIXlt(): 시계열분석이나 년/월/일/시간/분/초 단위로 구분해서 연산을 해야 하는 경우 
#해당 함수로 날짜/시간 type으로 바꾸어주면 편하다.
t<-Sys.time()
ct<-as.POSIXct(t)
lt<-as.POSIXlt(t)
str(ct) 
str(lt) 
unclass(ct) 
unclass(lt) 
lt$mon+1
lt$hour
lt$year+1900
as.POSIXct(1449994438,origin="1970-01-01") #시간정보가 이렇게 초단위로 숫자로 되어있을수도 있다.
as.POSIXlt(1449994438,origin="1970-01-01")


#올해의 크리스마스 요일 2가지방법(요일명,숫자)
christmas2<-as.POSIXlt("2020-12-25")
weekdays(christmas2)
christmas2$wday #숫자로 나온다. weekdays만 할거면 weekdays만 해도 된다.
#2020년 1월 1일 어떤 요일
tmp<-as.POSIXct("2020-01-01")
weekdays(tmp)
#오늘은 xxxx년x월xx일x요일입니다 형식으로 출력
tmp<-Sys.Date()
format(tmp,'오늘은 %Y년 %B %d일 %A입니다')
year<-format(tmp,'%Y')
month<-format(tmp,'%m')
day<-format(tmp,'%d')
weekday<-format(tmp,'%A')
paste("오늘은 ",year,"년 ",month,"월 ",day,"일 ",weekday," 입니다.",sep="")

as.Date("2020/01/01 08:00:00") - as.Date("2020/01/01 05:00:00")
as.POSIXct("2020/01/01 08:00:00") - as.POSIXct("2020/01/01 05:00:00")
as.POSIXlt("2020/01/01 08:00:00") - as.POSIXlt("2020/01/01 05:00:00")


# 문자열 처리 관련 주요 함수들
x <- "We have a dream"
nchar(x) # 문자 자체의 길이
length(x) # 백터가 몇개로 데이터로 구성되어 있는지.

y <- c("We", "have", "a", "dream")
length(y)
nchar(y)

letters
sort(letters, decreasing=TRUE)

fox.says <- "It is only with the HEART that one can See Rightly"
tolower(fox.says) #소문자 로
toupper(fox.says) #대문자 로

substr("Data Analytics", start=1, stop=4)
substr("Data Analytics", 6, 14) #매개변수 생략 가능
substring("Data Analytics", 6) # 무조건 끝까지 뽑아냄

classname <- c("Data Analytics", "Data Mining", "Data Visualization")
substr(classname, 1, 4)

countries <- c("Korea, KR", "United States, US", "China, CN")
substr(countries, nchar(countries)-1, nchar(countries))

head(islands)
landmesses <- names(islands)
landmesses
grep(pattern="New", x=landmesses)

index <- grep("New", landmesses)
landmesses[index]
# 동일
grep("New", landmesses, value=T)


txt <- "Data Analytics is useful. Data Analytics is also interesting."
sub(pattern="Data", replacement="Business", x=txt)
gsub(pattern="Data", replacement="Business", x=txt)

x <- c("test1.csv", "test2.csv", "test3.csv", "test4.csv")
gsub(".csv", "", x)

words <- c("ct", "at", "bat", "chick", "chae", "cat", "cheanomeles", "chase", "chasse", "mychasse", "cheap", "check", "cheese", "hat", "mycat")

grep("che", words, value=T)
grep("at", words, value=T)
grep("[ch]", words, value=T)
grep("[at]", words, value=T)
grep("ch|at", words, value=T)
grep("ch(e|i)ck", words, value=T)
grep("chase", words, value=T)
grep("chas?e", words, value=T)
grep("chas*e", words, value=T)
grep("chas+e", words, value=T)
grep("ch(a*|e*)se", words, value=T)
grep("^c", words, value=T)
grep("t$", words, value=T)
grep("^c.*t$", words, value=T)

words2 <- c("12 Dec", "OK", "http//", 
            "<TITLE>Time?</TITLE>", 
            "12345", "Hi there")

grep("[[:alnum:]]", words2, value=TRUE)
grep("[[:alpha:]]", words2, value=TRUE)
grep("[[:digit:]]", words2, value=TRUE)
grep("[[:punct:]]", words2, value=TRUE)
grep("[[:space:]]", words2, value=TRUE)
grep("\\w", words2, value=TRUE)
grep("\\d", words2, value=TRUE)
grep("\\s", words2, value=TRUE)



fox.said <- "What is essential is invisible to the eye"
fox.said
strsplit(x= fox.said, split= " ")
strsplit(x= fox.said, split="")

fox.said.words <- unlist(strsplit(fox.said, " "))
fox.said.words
fox.said.words <- strsplit(fox.said, " ")[[1]]
fox.said.words
fox.said.words[3]
p1 <- "You come at four in the afternoon, than at there I shall begin to the  happy"
p2 <- "One runs the risk of weeping a little, if one lets himself be tamed"
p3 <- "What makes the desert beautiful is that somewhere it hides a well"
littleprince <- c(p1, p2, p3)
strsplit(littleprince, " ")
strsplit(littleprince, " ")[[3]] 
strsplit(littleprince, " ")[[3]][5]
